<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TheBoxSoftware.Reflection</name>
    </assembly>
    <members>
        <member name="T:TheBoxSoftware.Reflection.AssemblyDef">
            <summary>
        The AssemblyDef provides the top level information and entry point to
        all types, methods etc reflected from a .NET executable.
      </summary><remarks>
        <para>
          The AssemblyDef is the starting point for obtaining reflected information
          about a .NET assembly. This information is obtained by parsing and discerning
          information about <see cref="T:TheBoxSoftware.Reflection.TypeDef" />s, <see cref="T:TheBoxSoftware.Reflection.MethodDef" />s etc from
          the .NET metadata stored in the <see cref="T:TheBoxSoftware.Reflection.Core.PeCoffFile" />.
        </para>
        <para>
          The assembly implements a mechanism for generating unique identifiers
          that can be assigned to each of the elements reflected in this assembly. The
          unique identifier is not really required but can help other applications to
          store keys and find reflected elements more quickly and uses less memory than
          string based unique identifiers.
        </para>
        <example>
          <code>
          // Instantiate from a full file path and name
          AssemblyDef assembly = AssemblyDef.Create(myAssemblyPath);
          
          // Instantiate from an already existing loaded metadata file
          PeCoffFile peCoffFile = new PeCoffFile(myAssemblyPath);
          AssemblyDef assembly = AssemblyDef.Create(peCoffFile);
          </code>
        </example>
      </remarks><seealso cref="T:TheBoxSoftware.Reflection.Core.PeCoffFile" /> 
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyDef.Create(System.String)">
            <summary>
        Creates and instantiates an AssemblyDef based on the provided library name.
      </summary><param name="fileName">The file name of the assembly to reflect.</param><returns>The instantiated AssemblyDef.</returns><exception cref="T:System.ArgumentNullException">The filename was null or empty.</exception><exception cref="T:TheBoxSoftware.Reflection.Core.NotAManagedLibraryException">
        Thrown when a PeCoff file is passed to the function and the <paramref name="fileName" />
        does not contain a <see cref="F:TheBoxSoftware.Reflection.Core.PE.DataDirectories.CommonLanguageRuntimeHeader" />.
      </exception> 
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyDef.Create(TheBoxSoftware.Reflection.Core.PeCoffFile)">
            <summary>
        Initialises and instantiates an AssemblyDef instance for the provided
        <see cref="T:TheBoxSoftware.Reflection.Core.PeCoffFile" /> (assembly).
      </summary><param name="peCoffFile">The PeCoffFile to load the AssemblyDef from.</param><returns>The instantiated AssemblyDef.</returns><exception cref="T:System.ArgumentNullException">Thrown when the PeCoffFile is null.</exception><exception cref="T:TheBoxSoftware.Reflection.Core.NotAManagedLibraryException">
        Thrown when a PeCoff file is passed to the function and the <paramref name="peCoffFile" />
        does not contain a <see cref="F:TheBoxSoftware.Reflection.Core.PE.DataDirectories.CommonLanguageRuntimeHeader" />.
      </exception> 
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyDef.GetTypesInNamespaces">
            <summary>
        Returns all the types in their respective namespaces.
      </summary><returns>A dictionary of namespaces and its containing types</returns> 
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyDef.IsNamespaceDefined(System.String)">
            <summary>
        Checks if this assembly defines the namespace specified.
      </summary><param name="theNamespace">The namespace to check.</param><returns>True if yes else false.</returns><remarks>
        When using this make sure that you are aware that more than one assembly
        can specifiy the same namespace.
      </remarks> 
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyDef.GetNamespaces">
            <summary>
        Obtains a collection of all the namespaces defined in this assembly.
      </summary><returns>The collection of strings representing the namespaces.</returns> 
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyDef.FindType(System.String,System.String)">
            <summary>
        Searches the assembly for the named type in the specified assembly.
      </summary><param name="theNamespace">The namespace to search for the type in.</param><param name="theTypeName">The name of the type</param><returns>The resolved type definition or null if not found.</returns> 
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyDef.CreateUniqueId">
            <summary>
            Get the next available unique identifier for this assembly.
            </summary>
            <returns>The unique identifier</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyDef.ResolveMetadataToken(System.Int32)">
            <summary>
        Helps to resolve tokens from the metadata to there associated types and elements inside
        this assembly.
      </summary><param name="metadataToken">The metadata token to resolve</param><returns>A resolved token reference or null if not found in this assembly.</returns><remarks>
        A token is specific to an assembly.
      </remarks> 
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyDef.ResolveCodedIndex(TheBoxSoftware.Reflection.Core.COFF.CodedIndex)">
            <summary>
        Resolves a coded index to its instantiated reference
      </summary><param name="index">The coded index to resolve</param><returns>Null if not resolved else the object referenced by the index</returns> 
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyDef.GetGloballyUniqueId">
            <summary>
        Returns a unique identifier for this AssemblyDef.
      </summary><returns /> 
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyDef.GetAssemblyId">
            <summary>
        Returns the unique identifier of the AssemblyDef
      </summary><returns>The assembly unique id</returns> 
        </member>
        <member name="P:TheBoxSoftware.Reflection.AssemblyDef.File">
            <summary>
            The <see cref="T:TheBoxSoftware.Reflection.Core.PeCoffFile"/> the assembly was reflected from.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.AssemblyDef.Version">
            <summary>
            The version details for this assembly.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.AssemblyDef.StringStream">
            <summary>
        Gets or sets a reference to the string stream.
      </summary><remarks>
        This has been created to reduce the cost of obtaining this information, it is
        a well access field and storing it behind a property just increases cost for no
        reason.
      </remarks> 
        </member>
        <member name="T:TheBoxSoftware.Reflection.AssemblyRef">
            <summary>
            Represents a reference to an external library.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.AssemblyRef.CreateFromMetadata(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow)">
            <summary>
            Initialises a new instance of the AssemblyRef class from the provided details.
            </summary>
            <param name="assembly">The assembly this reference is made in.</param>
            <param name="metadata">The metadata details for the assembly.</param>
            <param name="row">The row that provides the assembly reference details.</param>
            <returns>A populated AssemblyRef instance.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.AssemblyRef.Version">
            <summary>
            The full version details of the referenced assembly.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.AssemblyRef.Culture">
            <summary>
            The string representing the culture of the assembly.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.AttributeRequiredException">
            <summary>
            Exception which details that an attribute on one of the XmlCodeElements
            is missing when it is required.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.AttributeRequiredException.#ctor(System.String,TheBoxSoftware.Reflection.Comments.XmlCodeElements)">
            <summary>
            Initialises a new instance of the AttributeRequiredException class.
            </summary>
            <param name="attribute">The attribute that was missing</param>
            <param name="fromElement">The element the attribute is missing from</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.AttributeRequiredException.Attribute">
            <summary>
            The attribute that was missing from the <see cref="T:TheBoxSoftware.Reflection.Comments.XmlCodeElement"/>.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.CodeXmlCodeElement">
            <summary>
            Represents a pre-formatted code entry as a block level element.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CodeXmlCodeElement.#ctor(System.Xml.XmlNode)">
            <summary>
            Initialises a new instance of the CodeXmlCodeElement class.
            </summary>
            <param name="node">The node to parse.</param>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.CRefConstants">
            <summary>
            Set of constants that define all of the different cref identifiers
            that can be used in code comments.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefConstants.FieldTypeIndicator">
            <summary>
            Constant that defines a field reference.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefConstants.PropertyTypeIndicator">
            <summary>
            Constant that defines a property reference.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefConstants.MethodTypeIndicator">
            <summary>
            Constant that defines a method reference.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefConstants.TypeIndicator">
            <summary>
            Constant that defines a type reference.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefConstants.NamespaceTypeIndicator">
            <summary>
            Constant that defines a namespace reference.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefConstants.EventTypeIndicator">
            <summary>
            Constant that defines an event reference.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefConstants.ErrorTypeIndicator">
            <summary>
            Constant that defines a resolution error reference.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefConstants.GetIndicatorFor(TheBoxSoftware.Reflection.Comments.CRefTypes)">
            <summary>
            Returns the string indicator for the specified CRef type.
            </summary>
            <param name="type">The type to return the indicator for.</param>
            <returns>The indicator.</returns>
            <exception cref="T:System.NotImplementedException">
            The provided constant in the enumeration <paramref name="type"/> has
            not been implemented.
            </exception>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.CRefPath">
            <summary>
            Class that handles and parses a CRef comment path. A CRef path can contain a fully qualified 
            link to a type, property, method etc in an assembly.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.#ctor">
            <summary>
            Initialises a new instance of the CRefPath class.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.#ctor(TheBoxSoftware.Reflection.FieldDef)">
            <summary>
            Constructs a cref path for the provided <paramref name="field"/>.
            </summary>
            <param name="field">The field to create the path for.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.#ctor(TheBoxSoftware.Reflection.TypeRef)">
            <summary>
            Initialises a new instance of the CRefPath class.
            </summary>
            <param name="type">The TypRef to initialise the path with.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.#ctor(TheBoxSoftware.Reflection.PropertyDef)">
            <summary>
            Initialises a new instance of the CRefPath class.
            </summary>
            <param name="property">The property to initialise the path with.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.#ctor(TheBoxSoftware.Reflection.EventDef)">
            <summary>
            Initialises a new instance of the CRefPath class.
            </summary>
            <param name="cEvent">The event to create the path to.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.#ctor(TheBoxSoftware.Reflection.MethodDef)">
            <summary>
            Initialises a new instance of the CRefPath class.
            </summary>
            <param name="method">The method to initialise the path with.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.#ctor(TheBoxSoftware.Reflection.Comments.CRefTypes,TheBoxSoftware.Reflection.TypeRef,System.String)">
            <summary>
            Private constructor initialises a new instance of the CRefPath class.
            </summary>
            <param name="crefPathType">The cref path type.</param>
            <param name="type">The type information.</param>
            <param name="element">The element name for the path.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.Create(TheBoxSoftware.Reflection.ReflectedMember)">
            <summary>
            Factory method for creating CRefPath entries when the type
            is unknown.
            </summary>
            <param name="member">The member to create a path for</param>
            <returns>The CRefPath</returns>
            <exception cref="T:System.NotImplementedException">
            Thrown when the type of the <see cref="T:TheBoxSoftware.Reflection.ReflectedMember"/> is not
            implemented.
            </exception>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.Parse(System.String)">
            <summary>
            Parses the provided path and returns a populated cref path instance.
            </summary>
            <param name="crefPath">The cref path to control.</param>
            <exception cref="T:System.ArgumentNullException">The specified path was null or empty.</exception>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.ToString">
            <summary>
            Returns a string representation of this CRefPath.
            </summary>
            <returns>The cref path constructed from the elements.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.FindIn(TheBoxSoftware.Reflection.TypeDef)">
            <summary>
            Finds the member this <see cref="T:TheBoxSoftware.Reflection.Comments.CRefPath"/> refers to in the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>The found member ref.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.Parse">
            <summary>
            Parses the contents of the contained path and stores the details in the
            classes properties.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.CRefPath.ParseType">
            <summary>
            Extracts the cref type portion of the string and sets the <see cref="P:TheBoxSoftware.Reflection.Comments.CRefPath.PathType"/>.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.CRefPath.PathType">
            <summary>
            Indicates the type of element that is referenced by the CRef path.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.CRefTypes">
            <summary>
            An enumeration of the available types of element that can be referenced
            by a cref path in the xml code comments for an assembly.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefTypes.Namespace">
            <summary>
            Represents a cref link to a namespace; these can not have commented directly
            but can be referenced.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefTypes.Type">
            <summary>
            Represents a path to a type defined in this or another assembly.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefTypes.Property">
            <summary>
            Represents a path to a property in a type.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefTypes.Field">
            <summary>
            Represents a fully qualified path to a field in a type.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefTypes.Method">
            <summary>
            Represents a fully qualified path to a method in a type.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefTypes.Event">
            <summary>
            Represents a fully qualified path to an event.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.CRefTypes.Error">
            <summary>
            The compiler when generating the path could not resolve the type.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.CXmlCodeElement">
            <summary>
            Represents a tokenised version of the inine &lt;c> comment element.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.ExampleXmlCodeElement">
            <summary>
            An internal representation of the example XML comment element.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.ExampleXmlCodeElement.#ctor(System.Xml.XmlNode)">
            <summary>
            Initialises a new instance of the ExampleXmlCodeElement class.
            </summary>
            <param name="node">The associated XML node.</param>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.ExceptionXmlCodeElement">
            <summary>
            CodeElement that describes an exception that can be thrown.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.ExceptionXmlCodeElement.#ctor(System.Xml.XmlNode)">
            <summary>
            Initialises a new instance of the ExceptionXmlCodeElement class.
            </summary>
            <param name="node">The node describing the exception.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.ExceptionXmlCodeElement.Member">
            <summary>
            The path to the exception this exception element refers to.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.ListTypes">
            <summary>
            An enumeration of the available types that a <see cref="T:TheBoxSoftware.Reflection.Comments.ListXmlCodeElement"/>
            can be.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.ListTypes.Table">
            <summary>
            The list had a type of table and should be handled as a table.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.ListTypes.Bullet">
            <summary>
            The list had a type of bullet and should be handled as
            a bulletted list.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.ListTypes.Number">
            <summary>
            The list had a type of number and should be handled as
            a numbered list.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.ListXmlCodeElement">
            <summary>
            An internal representation of the list XML element.
            </summary>
            <remarks>
            A list element can represent a numbered or bulletted list or a table by way of a type
            attribute. If no type attribute is specified it will default to a bulleted list.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.ListXmlCodeElement.#ctor(System.Xml.XmlNode)">
            <summary>
            Initialises a new instance of the ListXmlCodeElement class.
            </summary>
            <param name="node">The node the list is based on.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.ListXmlCodeElement.IsTable">
            <summary>
            Checks the contents of the list to determine if it should be handled
            as a table or a list.
            </summary>
            <returns>True if the displayer should display a table.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.ListXmlCodeElement.ListType">
            <summary>
            Gets or sets the style for bullets displayed in this list.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.ParamXmlCodeElement.Name">
            <summary>
            The name of the parameter this code comment refers to.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.PermissionXmlCodeElement">
            <summary>
            Represents the permission XML code element.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.PermissionXmlCodeElement.#ctor(System.Xml.XmlNode)">
            <summary>
            Initialises a new instance of the PermissionXmlCodeElement class.
            </summary>
            <param name="node">The XML node representing the permission details.</param>
            <exception cref="T:TheBoxSoftware.Reflection.Comments.AttributeRequiredException">The cref attribute was missing.</exception>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.PermissionXmlCodeElement.Member">
            <summary>
            The member (i.e. permission set) this permission points to.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.SeeAlsoXmlCodeElement">
            <summary>
            This XML element allows people to associate other useful elements to the
            current documentation. I.e. for further reading.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.SeeAlsoXmlCodeElement.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="node">The node describing the seealso xml element.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.SeeAlsoXmlCodeElement.Member">
            <summary>
            Obtains the member this see also element refers to.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.SeeXmlCodeElement.Member">
            <summary>
            The member this elements points to.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.TextXmlCodeElement">
            <summary>
            Not really an allowed xml code comment element; but this is used by the system to aid in the 
            parsing of inline textual elements from other <see cref="T:TheBoxSoftware.Reflection.Comments.XmlCodeElement"/> implementations.
            </summary>
            <remarks>
            This class will only ever treat text as an inline element. Therefore it will strip multiple 
            new lines and reduce them to single spaces. If the user wants the text over multiple lines 
            they should use the para XmlCodeElement in their documentation.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.TextXmlCodeElement.#ctor(System.Xml.XmlNode)">
            <summary>
            Initialises a new instance of the TextXmlCodeElement class.
            </summary>
            <param name="node">The node containing the text.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.TypeParamRefXmlCodeElement.Name">
            <summary>
            The name this parameter reference refers to.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.TypeParamXmlCodeElement.Name">
            <summary>
            The name this xml code element refers to.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.XmlCodeComment">
            <summary>
            The details of the comments associated with a single member.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeComment.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeComment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeComment.#ctor(System.Xml.XmlNode)">
            <summary>
            Initialises a new XmlCodeComment instance.
            </summary>
            <param name="node">The node to parse the comment details from.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="node"/> is null.
            </exception>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.XmlCodeComment.Member">
            <summary>
            The member which this XmlCodeComment is for.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.XmlCodeComment.Empty">
            <summary>
            Gets a valid but empty XmlCodeComment reference.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile">
            <summary>
            A container and manager class for the xml code comments files associated
            with libraries.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.#ctor(System.String)">
            <summary>
            Initialises a new instance of the XmlCodeCommentFile
            </summary>
            <param name="xmlCommentFile">The file to parse.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.ReadComment(TheBoxSoftware.Reflection.Comments.CRefPath)">
            <summary>
            Reads the XML code comments for the member specified <paramref name="forMember"/>.
            </summary>
            <param name="forMember">The CRefPath to read the xml code comments for.</param>
            <returns>The <see cref="T:TheBoxSoftware.Reflection.Comments.XmlCodeComment"/>.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.ReadComment(System.String)">
            <summary>
            Reads the XML code comments for the specified xpath. This method allows callers
            to be specific about which top-level code comment elements are loaded in to the
            comment.
            </summary>
            <param name="xpath">The xpath path to load the comments of.</param>
            <returns>The XmlCodeComment</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.GetComment(System.String)">
            <summary>
            Reads the XML code comments for the specified xpath. This method allows callers
            to be specific about which top-level code comment elements are loaded in to the
            comment.
            </summary>
            <param name="xpath">The xpath path to load the comments of.</param>
            <returns>The XmlCodeComment</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.GetXmlFor(TheBoxSoftware.Reflection.Comments.CRefPath)">
            <summary>
            Obtains the original XML for the specified <paramref name="cref"/>.
            </summary>
            <param name="cref">The member to get the original XML for</param>
            <returns>The original XML for the specified member</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.GetReusableFile">
            <summary>
            Obtains an instance of the <see cref="T:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.ReusableXmlCodeCommentFile"/>.
            </summary>
            <returns>The instance.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.Exists">
            <summary>
            Indicates if the xml code comment file exists.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.ReusableXmlCodeCommentFile">
            <summary>
            A re-usable copy of the XmlCodeCommentFile. This class is more
            resource intensive and should not be kept for long periods of time.
            However it does speed up the process of reading many elements from
            the xml file in iterations.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.ReusableXmlCodeCommentFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initialises a new instance of the ReusableXmlCodeCommentFile class.
            </summary>
            <param name="file">The filename of the xml comments file.</param>
            <param name="exists">Indicates if the file exists.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.ReusableXmlCodeCommentFile.GetComment(System.String)">
            <summary>
            <para>
            Overrides the basic implementation for retrieving a comment, this method
            utilises the expensive but much quicker in memory representation of the 
            xml file.
            </para>
            <para>
            If you only need to read a single comment you should use a XmlCodeCommentFile
            instance.
            </para>
            </summary>
            <param name="xpath">The XPath expression to search for.</param>
            <returns>The XmlCodeComment found or XmlCodeComment.Empty if not.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeCommentFile.ReusableXmlCodeCommentFile.GetXmlFor(TheBoxSoftware.Reflection.Comments.CRefPath)">
            <summary>
            Obtains the original XML for the specified <paramref name="cref"/>.
            </summary>
            <param name="cref">The member to get the original XML for</param>
            <returns>The original XML for the specified member</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.XmlCodeElement">
            <summary>
            Base class for all the implementations of the XmlCodeComments.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElement.DefinedElements">
            <summary>
            Dictionary of all available XmlCodeElements and thier associated string
            representations.
            </summary>
            <remarks>
            This was created because parsing enumerations uses reflection, which is slow,
            and also it may throw exceptions for types not supported; which could happen
            a lot.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeElement.#ctor(TheBoxSoftware.Reflection.Comments.XmlCodeElements)">
            <summary>
            Initialises a new instance of the base class, to be called from all derived
            classes so the element type is populated.
            </summary>
            <param name="element">The type of element this instance represents.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeElement.RemoveNewLines(System.String)">
            <summary>
            Removes the new lines from all the areas in the string.
            </summary>
            <param name="content">The content to remove the new lines from.</param>
            <returns>The new string without new lines.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCodeElement.RemoveLeadingAndTrailingWhitespace(System.String)">
            <summary>
            Removes all the whitespace characters from the beginning and end of the
            provided <paramref name="content"/> string.
            </summary>
            <param name="content">The content to trim.</param>
            <returns>The trimmed string.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.XmlCodeElement.Text">
            <summary>
            Obtains a string value that contains the textual portion of the
            XmlCodeElement.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.XmlCodeElement.IsInline">
            <summary>
            Indicates if this is an inline level element.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.XmlCodeElement.IsBlock">
            <summary>
            Indicates if this is a block level element.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.XmlCodeElement.Element">
            <summary>
            Gets the type of element this instance refers to.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.XmlCodeElementCollection">
            <summary>
            Manages a collection of <see cref="T:TheBoxSoftware.Reflection.Comments.XmlCodeElement"/> instances.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.XmlCodeElements">
            <summary>
            Enumeration of supported XML Code Comment tags
            </summary>
            <remarks>
            If this enumeration is increased make sure that the relevant modifications in the
            parsing methods <see cref="T:TheBoxSoftware.Reflection.Comments.XmlContainerCodeElement"/> and the definition list is
            <see cref="F:TheBoxSoftware.Reflection.Comments.XmlCodeElement.DefinedElements"/> updated.
            </remarks>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.C">
            <summary>
            The &lt;c&gt; tag gives you a way to indicate that text within a description should be 
            marked as code. Use &lt;code&gt; to indicate multiple lines as code. 
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Code">
            <summary>
            The &lt;code&gt; tag gives you a way to indicate multiple lines as code. Use &lt;c&gt; 
            to indicate that text within a description should be marked as code. 
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Example">
            <summary>
            The &lt;example&gt; tag lets you specify an example of how to use a method or other 
            library member. This commonly involves using the &lt;code&gt; tag. 
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Exception">
            <summary>
            The &lt;exception&lt; tag lets you specify which exceptions can be thrown. This tag 
            can be applied to definitions for methods, properties, events, and indexers.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Include">
            <summary>
            Used to point the compiler at an external comments file for the element being documented;
            this should never exist inside an xml comments file.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.List">
            <summary>
            <para>
            The &lt;listheader&gt; block is used to define the heading row of either a table or definition 
            list. When defining a table, you only need to supply an entry for term in the heading.
            </para>
            <para>
            Each item in the list is specified with an &lt;item&gt; block. When creating a definition 
            list, you will need to specify both term and description. However, for a table, bulleted 
            list, or numbered list, you only need to supply an entry for description.
            </para>
            <para>A list or table can have as many &lt;item&gt; blocks as needed.</para>
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.ListHeader">
            <summary>
            The &lt;listheader&gt; block is used to define the heading row of either a table or definition 
            list. When defining a table, you only need to supply an entry for term in the heading. Further,
            the listheader is not required and should not be provided when a simple list is required.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.ListItem">
            <summary>
            A list or table can have as many &lt;item&gt; blocks as needed.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Term">
            <summary>
            Only available in listheader and item elements of list blocks. This defines a term and is used
            when the list is to be presented as a definition list or a table.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Description">
            <summary>
            Only available in listheader and item elements of list blocks. This defines a description and is
            used when the list is to be presented as a definition list, list or table. If only the description
            is present the list will be presented as a simple list.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Para">
            <summary>
            The &lt;para&lt; tag is for use inside a tag, such as &lt;summary&gt;, &lt;remarks&gt;, or 
            &lt;returns&gt;, and lets you add structure to the text.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Param">
            <summary>
            The &lt;param&lt; tag should be used in the comment for a method declaration to describe 
            one of the parameters for the method. 
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.ParamRef">
            <summary>
            The &lt;paramref&gt; tag gives you a way to indicate that a word in the code comments, for 
            example in a &lt;summary&gt; or &lt;remarks&gt; block refers to a parameter. The XML file 
            can be processed to format this word in some distinct way, such as with a bold or italic font.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Permission">
            <summary>
            The &lt;permission&gt; tag lets you document the access of a member. The PermissionSet class 
            lets you specify access to a member. 
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Remarks">
            <summary>
            The &lt;remarks&gt; tag is used to add information about a type, supplementing the information 
            specified with &lt;summary&gt;. This information is displayed in the Object Browser.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Returns">
            <summary>
            The &lt;returns&gt; tag should be used in the comment for a method declaration to describe the 
            return value. 
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.See">
            <summary>
            The &lt;see&gt; tag lets you specify a link from within text. Use &lt;seealso&gt; to indicate 
            that text should be placed in a See Also section. Use the cref Attribute to create internal 
            hyperlinks to documentation pages for code elements. 
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.SeeAlso">
            <summary>
            The &lt;seealso&lt; tag lets you specify the text that you might want to appear in a See Also 
            section. Use &lt;see&gt; to specify a link from within text. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Summary" -->
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.TypeParam">
            <summary>
            The &lt;typeparam&gt; tag should be used in the comment for a generic type or method declaration 
            to describe a type parameter. Add a tag for each type parameter of the generic type or method.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.TypeParamRef">
            <summary>
            Use this tag to enable consumers of the documentation file to format the word in some distinct 
            way, for example in italics. 
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Value">
            <summary>
            The &lt;value&gt; tag lets you describe the value that a property represents. Note that when 
            you add a property via code wizard in the Visual Studio .NET development environment, it will 
            add a &lt;summary&gt; tag for the new property. You should then manually add a &lt;value&gt; tag 
            to describe the value that the property represents. 
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.B">
            <summary>
            The &lt;b&gt; tag lets you emphasise a portion of the comments.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.I">
            <summary>
            The &lt;i&gt; tag lets you emphasise a portion of the comments.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Comments.XmlCodeElements.Text">
            <summary>
            Not exactly an xml code element, but this is used by the parser to contain the textual elements
            stored in other XmlCodeElement instances.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Comments.XmlCommentException">
            <summary>
            Describes errors that occur while using the members and methods defined
            to read XML code comments
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCommentException.#ctor">
            <summary>
            Initialises a new instance of the XmlCommentException.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCommentException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the XmlCommentException.
            </summary>
            <param name="message">Message describing the error.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCommentException.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of the XmlCommentException.
            </summary>
            <param name="xml">The XML from the comment that caused the problem</param>
            <param name="message">Message describing the error.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCommentException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the XmlCommentException.
            </summary>
            <param name="message">Message describing the error.</param>
            <param name="innerException">The thrown exception.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCommentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initialises a new instance of the XmlCommentException.
            </summary>
            <param name="xml">The XML from the comment that caused the problem</param>
            <param name="message">Message describing the error.</param>
            <param name="innerException">The thrown exception.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCommentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">The info describing the exception.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.XmlCommentException.Xml">
            <summary>
            The XML of the comment that caused the exception.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCommentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the custom details of this exception to the SerializationInfo.
            </summary>
            <param name="info">The info to populate with custom details</param>
            <param name="context">The context</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlCommentException.GetExtendedInformation">
            <summary>
            Extracts as much information from the exception as possible and returns it as
            a formatted string.
            </summary>
            <returns>The formatted exception details.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlContainerCodeElement.#ctor(TheBoxSoftware.Reflection.Comments.XmlCodeElements)">
            <summary>
            Initialises a new instance of the XmlContainerCodeElement class.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlContainerCodeElement.#ctor">
            <summary>
            Private default constructor
            </summary>
            <remarks>
            It doesnt matter which type is passed through, this method can only be used
            internally. And currently helps with the static parse children method.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlContainerCodeElement.ParseChildren(System.Xml.XmlNode)">
            <summary>
            Parses the specified <paramref name="parentNode"/> and returns the
            parsed elements.
            </summary>
            <param name="parentNode">The parent node to parse the xml code elements from.</param>
            <returns>The collection of elements.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Comments.XmlContainerCodeElement.Parse(System.Xml.XmlNode)">
            <summary>
            Parses the child elements in to instances of <see cref="T:TheBoxSoftware.Reflection.Comments.XmlCodeElement"/>
            instances and returns them as a collection.
            </summary>
            <param name="parentNode">The block level element to parse.</param>
            <returns>The collection of parsed instances.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Comments.XmlContainerCodeElement.Elements">
            <summary>
            Collection of all child elements for this XmlContainerCodeElement.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.AssemblyFlags.PublicKey">
            <summary>
            The assembly reference holds the full (unhashed) public key.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.AssemblyFlags.SideBySideCompatible">
            <summary>
            The assembly is side-by-side compatible.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.AssemblyFlags.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.AssemblyFlags.Retargetable">
            <summary>
            The implementation of this assembly at runtime is not expected
            to match the version seen at compile time.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.AssemblyFlags.EnableJitCompileTracking">
            <summary>
            Reserved. A conforming implementation of the CLI can ignore this
            setting on read; some implementations misht use this bit to indicate
            that a CIL-to-native-code compiler should generate CIL-to-native-code
            map.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.AssemblyFlags.DisableJitCompileOptimizer">
            <summary>
            Reserved (a conforming implementation of the CLI can ignor ethis
            setting on read; some implementations might use this bit to indicate
            that a CIL-to-native-code compiler should not generate optimised
            code.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow">
            <summary>
            Represents the details of an Assembly stored in metadata.
            </summary>
            <remarks>
            Each PE/COFF file can only contain a reference to zero or one Assembly
            metadata row.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the AssemblyMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadat</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow.GetVersion">
            <summary>
            Returns a populated version class with the parsed version details for this
            assembly.
            </summary>
            <returns>The populated <see cref="T:TheBoxSoftware.Reflection.Core.Version"/> instance.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow.HashAlgId">
            <summary>
            4-byte constant of AssemblyHashAlgorithm
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow.MajorVersion">
            <summary>
            Version details
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow.MinorVersion">
            <summary>
            Version details
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow.BuildNumber">
            <summary>
            Version details
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow.RevisionNumber">
            <summary>
            Version details
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow.Flags">
            <summary>
            4-byte bitmask of AssemblyFlags
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow.PublicKey">
            <summary>
            An index in to the blob heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow.Name">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyMetadataTableRow.Culture">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.AssemblyOSMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the AssemblyOSMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the file</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyOSMetadataTableRow.OSPlatformID">
            <summary>
            4-byte constant
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyOSMetadataTableRow.OSMajorVersion">
            <summary>
            4-byte constant
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyOSMetadataTableRow.OSMinorVersion">
            <summary>
            4-byte constant
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.AssemblyProcessorMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the AssemblyProcessorMetadataTableRow class
            </summary>
            <param cref="!:stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset to the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyProcessorMetadataTableRow.Processor">
            <summary>
            4-byte constant
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises an instance of the AssemblyRefMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow.GetVersion">
            <summary>
            Returns a populated version class with the parsed version details for this
            assembly.
            </summary>
            <returns>The populated <see cref="T:TheBoxSoftware.Reflection.Core.Version"/> instance.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow.MajorVersion">
            <summary>
            Version details
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow.MinorVersion">
            <summary>
            Version details
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow.BuildNumber">
            <summary>
            Version details
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow.RevisionNumber">
            <summary>
            Version details
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow.Flags">
            <summary>
            4-byte bitmask of AssemblyFlags
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow.PublicKeyOrToken">
            <summary>
            An index in to the blob heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow.Name">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow.Culture">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefMetadataTableRow.HashValue">
            <summary>
            An index in to the blob heap
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefOSMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of AssemblyRefOSMetadataTableRow
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefOSMetadataTableRow.OSPlatformID">
            <summary>
            4-byte constant
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefOSMetadataTableRow.OSMajorVersion">
            <summary>
            4-byte constant
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefOSMetadataTableRow.OSMinorVersion">
            <summary>
            4-byte constant
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefOSMetadataTableRow.AssemblyRef">
            <summary>
            An index in to the AssemblyRef table
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefProcessorMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the AssemblyRefProcessorMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefProcessorMetadataTableRow.Processor">
            <summary>
            4-byte constant
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.AssemblyRefProcessorMetadataTableRow.AssemblyRef">
            <summary>
            An index in to the AssemblyRef table
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.BlobStream">
            <summary>
            The blob stream controls access to signitures contained in the pe/coff file.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.BlobStream._owningFile">
            <summary>
            Reference to file which owns the stream, this is stored to make it available to
            the signitures.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.BlobStream.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the BlobStream class
            </summary>
            <param name="file">The file the stream should be read from</param>
            <param name="address">The start address of the blob stream</param>
            <param name="size">The size of the stream</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.BlobStream.GetSigniture(System.Int32,TheBoxSoftware.Reflection.Signitures.Signitures)">
            <summary>
            Retrives a parsed <see cref="T:TheBoxSoftware.Reflection.Signitures.Signiture"/> for the specified
            <paramref name="startOffset"/> and <paramref name="signiture"/> type.
            </summary>
            <param name="startOffset">The start of the signiture in the stream.</param>
            <param name="signiture">The type of signiture to parse.</param>
            <returns>The parsed signiture.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.BlobStream.GetSignitureContents(System.Int32)">
            <summary>
            Obtains the contents of the signiture as a byte array.
            </summary>
            <param name="startOffset">The start offset of the signiture in the stream.</param>
            <returns>The contents of the signiture as a byte array.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.ClassLayoutMetadataTableRow">
            <summary>
            Describes a layout of a type when it is required to be layed out
            much like unmanaged structures
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.ClassLayoutMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instnace of the ClassLayoutMetadataTableRow
            </summary>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of this row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ClassLayoutMetadataTableRow.PackingSize">
            <summary>
            A 2 byte-constant
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ClassLayoutMetadataTableRow.ClassSize">
            <summary>
            A 4-byte constant
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ClassLayoutMetadataTableRow.Parent">
            <summary>
            An index in to the TypeDef table
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.CodedIndex">
            <summary>
            Represents a value which specifies both a table and an index in to that table
            from a single UInt16 or UInt32. <see cref="T:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.Details"/>
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,TheBoxSoftware.Reflection.Core.Offset,TheBoxSoftware.Reflection.Core.COFF.CodedIndexes)">
            <summary>
            Initialises a new CodedIndex.
            </summary>
            <param name="stream">The stream the coded index is in.</param>
            <param name="offset">The offset of the coded index in the stream.</param>
            <param name="codedIndex">The type of coded index to create.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataTables,System.UInt32)">
            <summary>
            Initialises a already determined instance of a CodedIndex class.
            </summary>
            <param name="table">The table the coded index is for</param>
            <param name="index">The index in the table</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.SizeOfIndex(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,TheBoxSoftware.Reflection.Core.COFF.CodedIndexes)">
            <summary>
            Obtains the size of the specified <paramref name="codedIndex"/>.
            </summary>
            <param name="stream">The stream that contains the metadata.</param>
            <param name="codedIndex">The coded index to find the size of.</param>
            <returns>A byte containing the number of bytes to represent the index.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.GetTableForCode(TheBoxSoftware.Reflection.Core.COFF.CodedIndexes,System.Byte)">
            <summary>
            Returns the MetadaDataTable represented by the specified code
            </summary>
            <param name="codedIndex">The coded index being used</param>
            <param name="code">The calculated table code</param>
            <returns>The metadata table</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.GetTablesInformation(TheBoxSoftware.Reflection.Core.COFF.CodedIndex.Details@,TheBoxSoftware.Reflection.Core.COFF.CodedIndexes)">
            <summary>
            Returns details of the tables for the specified coded index
            </summary>
            <param name="details">The details structure to populate</param>
            <param name="codedIndex">The coded index being used</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.GetDetails(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,TheBoxSoftware.Reflection.Core.COFF.CodedIndexes)">
            <summary>
            Obtains the basic details required to calculate the coded index
            </summary>
            <param name="stream">The metadata stream</param>
            <param name="codedIndex">The coded index being used</param>
            <returns>Basic details</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.ToString">
            <summary>
            Returns a string representation of this coded index
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.Table">
            <field>
            The MetadataTables value indicating the table this index is for.
            </field>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.Index">
            <field>
            The index in to the MetadataTable.
            </field>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.Details">
            <summary>
            Basic details for this coded index
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.Details.IsLarge">
            <summary>
            Indicates if the coded index is larger than a 2byte value (16 bits)
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.Details.RequiredNumberOfBytes">
            <summary>
            Returns the number of bytes required to hold this coded index
            </summary>
            <returns>The number of bytes</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.CodedIndex.Details.GetCodedIndex(System.UInt32,System.Byte@,System.UInt32@)">
            <summary>
            Utilises the details to calculate the table code and index for this coded index
            </summary>
            <param name="value">The value from the stream</param>
            <param name="code">The code to be populated</param>
            <param name="index">The index to be populated</param>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.CodedIndexMap">
            <summary>
            Manages a map of details required for calculating coded indexes.
            </summary>
            <remarks>
            <para>
            There is some detail for coded indexes that requires some processing
            storing a map of those details speeds up processing in the application.
            </para>
            <para>
            Each PeCoffFile will require its coded index map as trying to use the
            same instance across multiple files will result in coded index resolution
            failures.
            </para>
            <para>
            This class is internal and is only used in <see cref="T:TheBoxSoftware.Reflection.Core.COFF.MetadataStream"/>s.
            </para>
            </remarks>
            <seealso cref="T:TheBoxSoftware.Reflection.Core.COFF.MetadataStream"/>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.ConstantMetadataTableRow">
            <summary>
            Used to store compile time, constant values for fields, parameters and properties
            </summary>
            <remarks>
            <para>
            Note that constant information does not directly influence runtime behaviour, although
            it is visible via reflection. Compilers inspect this information, at compile time, when
            importing metadata, but the value of the constant itself, if used, becomes embedded in
            into the CIL stream the compiler emits. There are no CIL instructions to access constant
            table at runtime.
            </para>
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.ConstantMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the ConstantMetadataTableRow
            </summary>
            <param name="contents">The contents fo the file</param>
            <param name="offset">The offset for the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ConstantMetadataTableRow.Type">
            <summary>
            The type of field that represents the constant.
            </summary>
            <remarks>
            For a <b>nullref</b> value for <i>FieldInit</i> in <i>ilasm</i> is <c>ELEMENT_TYPE_CLASS</c>
            with a 4-byte zero. Unlike uses of <c>ELEMENT_TYPE_CLASS</c> in signitures, this one is
            <i>not</i> followed by a type token.
            </remarks>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ConstantMetadataTableRow.PaddingZero">
            <summary>
            Padding
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ConstantMetadataTableRow.Parent">
            <summary>
            An index in to the Param, Field, or Property table. More precisely
            a HasConstant coded index
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ConstantMetadataTableRow.Value">
            <summary>
            An index in to the Blob heap
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.Cor20Flags.ILOnly">
            <summary>The image file contains IL code only</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.Cor20Flags.Bit32Required">
            <summary>The image file can only be loaded in to a 32bit process</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.Cor20Flags.ILLibrary">
            <summary>This flag is obsolete</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.Cor20Flags.StrongNameSigned">
            <summary>The image file is protected with a strong name signiture</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.Cor20Flags.TrackedDebugData">
            <summary>The loader and the JIT compiler are required to track debug information</summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.CB">
            <summary>
            Size of the header in bytes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.MajorRuntimeVersion">
            <summary>
            Major portion of the minimum version of the runtime required
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.MinorRuntimeVersion">
            <summary>
            Minor portion of the minimum version of the runtime required
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.MetaData">
            <summary>
            RVA and size of the meta data
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.Flags">
            <summary>
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.EntryPointToken">
            <summary>
            Metadata identifier of the entry poitn for the image file. Can be 0 for DLL
            images. This field identifies a method belonging to this module or a module
            containing the entry point method.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.Resources">
            <summary>
            RVA and size of managed resources
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.StrongNameSigniture">
            <summary>
            RVA and size of the hash data fo rthis PE file, used by the loader for binding
            and versioning.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.CodeManagerTable">
            <summary>
            Reserved must be zero (first release of the runtime)
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.VTableFixups">
            <summary>
            RVA and size in butes of an array of virtual table (v-table) fixups. Among current
            managed compilers, only the MC++ compiler and linker and the ILAsm compiler can
            produce this array.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.ExportAddressTableJumps">
            <summary>
            RVA and size of an array of addresses of jump thunks
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.Cor20Header.ManagedNativeHeader">
            <summary>
            Reserved set to zero
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.CustomAttributeMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the CustomAttributeMetadataTableRow
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.CustomAttributeMetadataTableRow.Parent">
            <summary>
            A HasCustomAttribute encoded index
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.CustomAttributeMetadataTableRow.Type">
            <summary>
            A CustomAttributeType encoded index (Def or Ref tables)
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.CustomAttributeMetadataTableRow.Value">
            <summary>
            An index in to the blob heap
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.DeclSecurityMetadataTableRow">
            <summary>
            Security attributes which derive from SecurityAttribute, can be attached to
            TypeDef, a Method or an Assembly
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.DeclSecurityMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the DeclSecurityMetadataTableRow
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the this row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.DeclSecurityMetadataTableRow.Action">
            <summary>
            A 2 byte value
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.DeclSecurityMetadataTableRow.Parent">
            <summary>
            An index  into the MethodDef, TypeDef or Assembly tables. A HasDeclSecurity
            encoded index
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.DeclSecurityMetadataTableRow.PermissionSet">
            <summary>
            An index in to the blob heap
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.EventMapMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new EventMapMetadataTableRow
            </summary>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.EventMapMetadataTableRow.Parent">
            <summary>
            An index into the TypeDef table
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.EventMapMetadataTableRow.EventList">
            <summary>
            An index in to the Event table. Marking the first of a contiguos list
            of Events.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.EventMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the EventMetadataTableRow class
            </summary>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.EventMetadataTableRow.EventFlags">
            <summary>
            EventAttributes mask
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.EventMetadataTableRow.Name">
            <summary>
            An index in the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.EventMetadataTableRow.EventType">
            <summary>
            An index into a TypeDef, TypeRef, or TypeSpec table, more precisely
            a TypeDefOrRef encoded index
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.ExportedTypeMetadataTableRow">
            <summary>
            A type which is defined within other modules of this assembly. In essance, it stores
            TypeDef row numbers of all types tha are marked public in other modules that
            this Assembly comprises.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.ExportedTypeMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the ExportedTypeMetadataTableRow class
            </summary>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ExportedTypeMetadataTableRow.Flags">
            <summary>
            4-byte bitmask of TypeAttributes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ExportedTypeMetadataTableRow.TypeDefId">
            <summary>
            4-byte index in to the TypeDef table of another module in this
            Assembly. Hint, then search.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ExportedTypeMetadataTableRow.TypeName">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ExportedTypeMetadataTableRow.TypeNamespace">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ExportedTypeMetadataTableRow.Implementation">
            <summary>
            An index in to the File, ExportedType or precisely Implementation
            coded index
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes">
            <summary>
            Enumeration of attributes defined against a field in the metadata.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.FieldAccessMask">
            <summary>
            These 3 bits contain one of the following values:
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.CompilerControlled">
            <summary>
            Member not referenceable
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.Private">
            <summary>
            Accessible only by the parent type
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.FamANDAssem">
            <summary>
            Accessible by sub-types only in this Assembly
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.Assembly">
            <summary>
            Accessibly by anyone in the Assembly
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.Family">
            <summary>
            Accessible only by type and sub-types
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.FamORAssem">
            <summary>
            Accessibly by sub-types anywhere, plus anyone in assembly
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.Public">
            <summary>
            Accessibly by anyone who has visibility to this scope field
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.Static">
            <summary>
            Defined on type, else per instance
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.InitOnly">
            <summary>
            Field can only be initialized, not written to after init
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.Literal">
            <summary>
            Value is compile time constant
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.NotSerialized">
            <summary>
            Reserved (to indicate this field should not be serialized when
            type is remoted)
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.SpecialName">
            <summary>
            Field is special
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.PInvokeImpl">
            <summary>
            Implementation is forwarded through PInvoke.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.RTSpecialName">
            <summary>
            CLI provides 'special' behavior, depending upon the name of the field
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.HasFieldMarshal">
            <summary>
            Field has marshalling information
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.HasDefault">
            <summary>
            Field has default
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.FieldAttributes.HasFieldRVA">
            <summary>
            Field has RVA
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.FieldLayoutMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the FieldLayoutMetadataTableRow
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FieldLayoutMetadataTableRow.Offset">
            <summary>
            A 4-byte constant
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FieldLayoutMetadataTableRow.Field">
            <summary>
            An index to the field table
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.FieldMarshalMetadataTableRow">
            <summary>
            Links an existing row in the Field or Param table to information
            in the blob heap that defines how that field or parameter should
            be marshalled.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.FieldMarshalMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the FieldMarshalMEtadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FieldMarshalMetadataTableRow.Parent">
            <summary>
            A HasFieldMarshal encoded index to the Field or Param tables
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FieldMarshalMetadataTableRow.NativeType">
            <summary>
            An index in to the blob heap
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.FieldMetadataTableRow">
            <remarks>Modified to use 4-byte heap fields</remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.FieldMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the FieldMetadataTableRow
            </summary>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FieldMetadataTableRow.Flags">
            <summary>A 2-byte mask of FieldAttributes</summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FieldMetadataTableRow.Name">
            <summary>An index in to the string heap</summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FieldMetadataTableRow.Signiture">
            <summary>An index in to the Blob heap</summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.FieldRVAMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the FieldRVAMetadataTableRow class
            </summary>
            <param name="content">The content of the file</param>
            <param name="offset">The offset for the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FieldRVAMetadataTableRow.RVA">
            <summary>
            The RVA of the field
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FieldRVAMetadataTableRow.Field">
            <summary>
            An index into the Field table
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.FileMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the FileMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FileMetadataTableRow.Flags">
            <summary>
            A 4-byte bitmask of FileAttributes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FileMetadataTableRow.Name">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.FileMetadataTableRow.HashValue">
            <summary>
            An index in to the blob heap
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.GenericParamConstraintMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the GenericParamConstraintMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.GenericParamConstraintMetadataTableRow.Owner">
            <summary>
            An index into the GenericParam table
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.GenericParamConstraintMetadataTableRow.Constraint">
            <summary>
            An index in to the TypeDef, TypeRef, TypeSpec table or more precisely
            a TypeDefOrRef coded index
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.GenericParamMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the GenericParamMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.GenericParamMetadataTableRow.Number">
            <summary>
            A 2-byte index of the generic parameter, numbered left to right
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.GenericParamMetadataTableRow.Flags">
            <summary>
            A 2-byte bitmask of GenericParamAttributes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.GenericParamMetadataTableRow.Owner">
            <summary>
            An index in to the TypeDef, MethodDef; more precisley a TypeOrMethodDef
            encoded index
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.GenericParamMetadataTableRow.Name">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.GuidStream">
            <summary>
            Represents the metadata GUID stream available in .net pe/coff files. And provides
            access to those details.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.GuidStream.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the GuidStream class.
            </summary>
            <param name="file">The file which owns the stream.</param>
            <param name="address">The start address of the stream.</param>
            <param name="size">The size of the stream.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.GuidStream.GetGuid(System.Int32)">
            <summary>
            Obtains the <see cref="T:System.Guid"/> at the specified <paramref name="index"/>. The index provided
            is obtained from the <see cref="!:GuidIndex.Value"/> property.
            </summary>
            <param name="index">The index for the guid to obtain.</param>
            <returns>The instantiated Guid</returns>
            <exception cref="T:System.ArgumentException">
            The index was outside the boundaries for the stream, there is no guid available. Check the
            data in the exception for more information.
            </exception>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.GuidStream.GetAllGUIDs">
            <summary>
            Returns a collection of all the GUIDs defined in this stream.
            </summary>
            <returns>The dictionary of GUIDs and associated indexes.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.ImplMapMetadataTableRow">
            <summary>
            Holds information about unmanaged methods that can be reached from managed
            code, using PInvoke dispatch.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.ImplMapMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the ImplMapMetadataTableRow class
            </summary>
            <permission cref="!:stream">The stream containing the metadata</permission>
            <param name="content">The content of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ImplMapMetadataTableRow.MappingFlags">
            <summary>
            A 2-byte mask of PInvokeAttributes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ImplMapMetadataTableRow.MemberForward">
            <summary>
            An index in to the Field or MethodDef table, a MemberForwarded
            coded index. However it only ever references the MethodDef because
            Field is never exported
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ImplMapMetadataTableRow.ImportName">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ImplMapMetadataTableRow.ImportScope">
            <summary>
            An index into the ModuleRef table
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.Index">
            <summary>
            Represents a simple index item, where the item is an entry in to - generall -
            a metadata table.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.Index.Value">
            <field>
            The value for the index.
            </field>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.Index.#ctor(System.UInt32)">
            <summary>
            Private constructor which initialises the structure to a known
            index.
            </summary>
            <remarks>
            This is currently only used internally to be able to convert implicitly
            between an integer and an Index structure.
            </remarks>
            <param name="value">The value for the index.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.Index.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset,TheBoxSoftware.Reflection.Core.COFF.MetadataTables)">
            <summary>
            Initialises a new instance of the Index.
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current index to be read</param>
            <param name="table">The table this index points to</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.Index.SizeOfIndex(TheBoxSoftware.Reflection.Core.COFF.MetadataTables,TheBoxSoftware.Reflection.Core.COFF.MetadataStream)">
            <summary>
            Calculates the required size in bytes to store an index for that table.
            </summary>
            <param name="table">The table to get the index size for.</param>
            <param name="stream">The stream containing the table information.</param>
            <returns>A byte that indicates the size of the indexes for that table in bytes.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.Index.op_Implicit(TheBoxSoftware.Reflection.Core.COFF.Index)~System.UInt32">
            <summary>
            Implicitly allow the Index to be converted to an UInt32
            </summary>
            <param name="index">The index to convert</param>
            <returns>The UInt32 representation of the Index</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.Index.op_Implicit(System.UInt32)~TheBoxSoftware.Reflection.Core.COFF.Index">
            <summary>
            Implicity allow the casting from a uint32 to an Index
            </summary>
            <param name="index">The index to initialise the Index with</param>
            <returns>The instance of Index initialised appropriately</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.Index.op_Implicit(TheBoxSoftware.Reflection.Core.COFF.Index)~System.Int32">
            <summary>
            Implicitly allow the Index to be converted to an Int32
            </summary>
            <param name="index">The index to convert</param>
            <returns>The UInt32 representation of the Index</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.Index.op_Implicit(System.Int32)~TheBoxSoftware.Reflection.Core.COFF.Index">
            <summary>
            Implicity allow the casting from a int32 to an Index
            </summary>
            <param name="index">The index to initialise the Index with</param>
            <returns>The instance of Index initialised appropriately</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.StringIndex">
            <summary>
            Represents an index in to the metadata StringStream.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.StringIndex.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the StringStream.
            </summary>
            <param name="stream">The stream this index is for.</param>
            <param name="offset">The offset for the index in the file.</param>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.BlobIndex">
            <summary>
            Represents an index in to the BlobHeap. This heap contains details such as
            signitures and other userful metadata information.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.InterfaceImplMetadataTableRow">
            <summary>
            Records the interfaces a type implements explicitly
            </summary>
            <remarks>
            Updated for 4-byte heap indexes
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.InterfaceImplMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the InterfaceImplMetadataTableRow
            </summary>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of this row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.InterfaceImplMetadataTableRow.Class">
            <summary>
            An index in to the TypeDef table
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.InterfaceImplMetadataTableRow.Interface">
            <summary>
            An index in to the TypeDef, TypeRef, or TypeSpec table. More precisely
            a TypeDefOrRef coded index.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.ManifestResourceMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the ManifestResourceMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of this current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ManifestResourceMetadataTableRow.Offset">
            <summary>
            A 4-byte constant
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ManifestResourceMetadataTableRow.Flags">
            <summary>
            A 4-byte bitmask of ManifestResourceAttributes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ManifestResourceMetadataTableRow.Name">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ManifestResourceMetadataTableRow.Implementation">
            <summary>
            An index in to a File, AssemblyRef, or null; more precisely an
            Implementation coded index
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.MemberRefMetadataTableRow">
            <remarks>
            Updated for 4-byte heap indexes
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MemberRefMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the MemberRefMetadataTableRow
            </summary>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of this row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MemberRefMetadataTableRow.Class">
            <summary>
            An index in to the MethodDef, ModuleRef, TypeRef, or TypeSpec tables,
            more precisely a MemberRefParent coded index.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MemberRefMetadataTableRow.Name">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MemberRefMetadataTableRow.Signiture">
            <summary>
            An index in to the blob heap
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Int32)">
            <summary>
            Initialises a new instance of the MetadataDirectory
            </summary>
            <param name="file">The contents of the file</param>
            <param name="address">The base address of the directory</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory.GetMetadataStream">
            <summary>
            Helper method to obtain the stream of .NET metadata
            </summary>
            <returns>The .NET metadata stream</returns>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MetadataStream.codedIndexMap">
            <summary>
            <para>
            This is stored here because a coded index defenition map is relevant only
            for a single pecofffile and by association a metadatastream. If this is static
            in coded index (like it was) then the definitions will cause failures in the
            application.
            </para>
            <para>
            A map of initialised defenition entries. A definition is valid multiple
            times and storing this small structure will increase performance by reducing
            the number of row searches and lookups in the metadata tables.
            </para>
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MetadataStream.GetEntryFor(TheBoxSoftware.Reflection.Core.COFF.CodedIndex)">
            <summary>
            Obtains an entry in the specified table at the specified index
            </summary>
            <param name="codedIndex">The coded index decribing the metadata location.</param>
            <returns>The MetadataTableRow or null if not found</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MetadataStream.GetEntryFor(TheBoxSoftware.Reflection.Core.COFF.MetadataTables,System.Int32)">
            <summary>
            Obtains an entry in the specified table at the specified index
            </summary>
            <param name="table">The table to get the metadata for</param>
            <param name="index">The index in the table</param>
            <returns>The MetadataTableRow or null if not found</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MetadataStream.SizeOfStringIndexes">
            <summary>
            Returns the size (in bytes) of the indexes to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MetadataStream.SizeOfGuidIndexes">
            <summary>
            Returns the size (in bytes) of the indexes to the guid heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MetadataStream.SizeOfBlobIndexes">
            <summary>
            Returns the size (in bytes) of the indexes to the blob heap
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.MetadataTables">
            <summary>
            Enumeration of all the available metadata tables that can reside
            in a .net pe/coff file.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.MetadataTablesDictionary">
            <summary>
            Represents a dictionary of all of the metadata rows loaded from an assembly.
            </summary>
            <remarks>
            Internally this stores the unique FileOffset against an index in a table for
            the stored MetadataRow items.
            </remarks>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MetadataTablesDictionary.indexTable">
            <summary>
            Stores a set of values that relate a file offset (unique for any metadata row)
            against an index in its associated table. This is to reduce seek times when
            searching for elements. Whenever an entry is added to the dictionary its
            metadata rows should be added to this dictionary.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MetadataTablesDictionary.#ctor">
            <summary>
            Initialises a new instance of the MetadataTablesDictionary class.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MetadataTablesDictionary.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the MetadataTablesDictionary class.
            </summary>
            <param name="capacity">The starting capacity.</param>
            <remarks>
            This can be used to set the starting capacity to the number of metadata
            tables defined in the pe coff file. To reduce the number of internal
            re-dimensioning.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MetadataTablesDictionary.SetMetadataTable(TheBoxSoftware.Reflection.Core.COFF.MetadataTables,TheBoxSoftware.Reflection.Core.COFF.MetadataRow[])">
            <summary>
            Sets a populated array of <see cref="T:TheBoxSoftware.Reflection.Core.COFF.MetadataRow"/>s against its associated
            metadata table.
            </summary>
            <param name="table">The table the rows have been loaded from.</param>
            <param name="rows">The rows that make up the table.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MetadataTablesDictionary.GetEntryFor(TheBoxSoftware.Reflection.Core.COFF.MetadataTables,System.Int32)">
            <summary>
            Gets the metadata row information from the specified table
            at the specified index.
            </summary>
            <param name="table">The table the metadata row resides in</param>
            <param name="index">The index of the item in the table</param>
            <returns>The metadata row if it exists else null</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MetadataTablesDictionary.GetIndexFor(TheBoxSoftware.Reflection.Core.COFF.MetadataTables,TheBoxSoftware.Reflection.Core.COFF.MetadataRow)">
            <summary>
            Returns the index for a specified metadata row from a metadata table.
            </summary>
            <param name="table">The table to get the metadata items index from</param>
            <param name="entry">The entry which resides in the metadata table</param>
            <returns>The index of the item or -1 if not found</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MetadataTablesDictionary.GetGenericParametersFor(TheBoxSoftware.Reflection.Core.COFF.MetadataTables,System.Int32)">
            <summary>
            Obtains a collection of generic parameter metadata rows for the specified
            table and index.
            </summary>
            <param name="table">The table to get the details for.</param>
            <param name="index">The index of that table to get the details for.</param>
            <returns>A list of generic parameters for the specified details.</returns>
            <remarks>
            This method will iterate over the GenericParam metadata table and search
            for entries whose parent is the specified table and index and return them.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <paramref name="table"/> and <paramref name="index"/> are invalid, please
            see the exception details for more information.
            </exception>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.MemberAccessMask">
            <summary>
             These 3 bits contain one of the following values:
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.CompilerControlled">
            <summary>
            Member not referenceable
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.Private">
            <summary>
            Accessible only by the parent type
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.FamANDAssem">
            <summary>
            Accessible by sub-types only in this Assembly
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.Assem">
            <summary>
            Accessibly by anyone in the Assembly
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.Family">
            <summary>
            Accessible only by type and sub-types
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.FamORAssem">
            <summary>
            Accessibly by sub-types anywhere, plus anyone in assembly
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.Public">
            <summary>
            Accessibly by anyone who has visibility to this scope
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.Static">
            <summary>
            Defined on type, else per instance
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.Final">
            <summary>
            Method cannot be overridden
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.Virtual">
            <summary>
            Method is virtual
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.HideBySig">
            <summary>
            Method hides by name+sig, else just by name
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.VtableLayoutMask">
            <summary>
            Use this mask to retrieve vtable attributes. This bit contains
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.ReuseSlot">
            <summary>
            Method reuses existing slot in vtable
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.NewSlot">
            <summary>
            Method always gets a new slot in the vtable
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.Strict">
            <summary>
            Method can only be overriden if also accessible
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.Abstract">
            <summary>
            Method does not provide an implementation
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.SpecialName">
            <summary>
            Method is special
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.PInvokeImpl">
            <summary>
            Implementation is forwarded through PInvoke
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.UnmanagedExport">
            <summary>
            Reserved: shall be zero for conforming implementations
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.RTSpecialName">
            <summary>
            CLI provides 'special' behavior, depending upon the name of the method
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.HasSecurity">
            <summary>
            Method has security associate with it
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodAttributes.RequireSecObject">
            <summary>
            Method calls another method containing security code.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags">
            <summary>
            Flags describing a <see cref="T:TheBoxSoftware.Reflection.Core.COFF.MethodMetadataTableRow"/>s implementation.
            </summary>
            <seealso cref="!:MethodMetadataRow"/>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.CodeTypeMask">
            <summary>
            These 2 bits contain one of the following values:
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.IL">
            <summary>Method impl is CIL</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.Native">
            <summary>Method impl is native</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.OPTIL">
            <summary>
            Reserved: shall be zero in conforming implementations
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.Runtime">
            <summary>
            Method impl is provided by the runtime
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.ManagedMask">
            <summary>
            Flags specifying whether the code is managed or unmanaged. This bit contains 
            one of the following values:
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.Unmanaged">
            <summary>Method impl is unmanaged, otherwise managed</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.Managed">
            <summary>Method impl is managed</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.ForwardRef">
            <summary>
            Implementation info and interop Indicates method is defined; used primarily 
            in merge scenarios.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.PreserveSig">
            <summary>
            Reserved: conforming implementations can ignore
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.InternalCall">
            <summary>
            Reserved: shall be zero in conforming implementations
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.Synchronized">
            <summary>
            Method is single threaded through the body
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.NoInlining">
            <summary>Method cannot be inlined</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodImplFlags.MaxMethodImplVal">
            <summary>Range check value</summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.MethodImplMetadataTableRow">
            <summary>
            Allows the compiler to override the default inheritance rules provided
            by the CLI.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MethodImplMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the MethodImplMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodImplMetadataTableRow.Class">
            <summary>
            An index into the TypeDef table
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodImplMetadataTableRow.MethodBody">
            <summary>
            An index in to a MethodDef or MemberRef, a MethodDefOrRef
            encoded index
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodImplMetadataTableRow.MethodDeclaration">
            <summary>
            An index in to a MethodDef or MemberRef table, a MethodDefOrRef
            encoded index
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.MethodMetadataTableRow">
            <summary>
            Describes a method definition loaded from the metadata tables in the pe/coff
            file.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MethodMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the MethodMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodMetadataTableRow.RVA">
            <summary>
            Address of the CIL method data
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodMetadataTableRow.ImplFlags">
            <summary>
            2-byte bitmask of MethodImplAttributes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodMetadataTableRow.Flags">
            <summary>
            A 2-byte bitmask of MethodAttributes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodMetadataTableRow.Name">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodMetadataTableRow.Signiture">
            <summary>
            An index in to the blob heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodMetadataTableRow.ParamList">
            <summary>
            An index in to the param table
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsAttributes">
            <summary>
            An enumeration of available relationship references
            for methods to properties, events etc.
            </summary>
            <seealso cref="T:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsMetadataTableRow" />
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsAttributes.Setter">
            <summary>
            Getter for a <see cref="T:TheBoxSoftware.Reflection.Core.COFF.PropertyMetadataTableRow"/>.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsAttributes.Getter">
            <summary>
            Setter for a <see cref="T:TheBoxSoftware.Reflection.Core.COFF.PropertyMetadataTableRow"/>.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsAttributes.Other">
            <summary>
            Other method for a <see cref="T:TheBoxSoftware.Reflection.Core.COFF.PropertyMetadataTableRow"/> or
            <see cref="T:TheBoxSoftware.Reflection.Core.COFF.EventMetadataTableRow"/>.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsAttributes.AddOn">
            <summary>
            Add method for a <see cref="T:TheBoxSoftware.Reflection.Core.COFF.EventMetadataTableRow"/>.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsAttributes.RemoveOn">
            <summary>
            Remove method for a <see cref="T:TheBoxSoftware.Reflection.Core.COFF.EventMetadataTableRow"/>.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsAttributes.Fire">
            <summary>
            Fire method for a <see cref="T:TheBoxSoftware.Reflection.Core.COFF.EventMetadataTableRow"/>.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsMetadataTableRow">
            <seealso cref="T:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsAttributes"/>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the MethodSemanticsMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsMetadataTableRow.Semantics">
            <summary>
            A 2-byte bitmask of type <see cref="T:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsAttributes"/>.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsMetadataTableRow.Method">
            <summary>
            An index into the MethodDef table
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodSemanticsMetadataTableRow.Association">
            <summary>
            An index into the Event or Property table, a HasSemantics coded index
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.MethodSpecMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the MethodSpecMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodSpecMetadataTableRow.Method">
            <summary>
            An index in to a MethodDef or MemberRef table, a MethodDefOrRef
            encoded index
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.MethodSpecMetadataTableRow.Instantiation">
            <summary>
            An index in to the blob heap
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.ModuleMetadataTableRow">
            <remarks>Updated for 4-byte heap indexes</remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.ModuleMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the ModuleMetadataTableRow class
            </summary>
            <param name="stream">The metadata stream containing the details</param>
            <param name="contents">The byte contents of the file</param>
            <param name="offset">The offset of this row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ModuleMetadataTableRow.Generation">
            <summary>Reserved, shall be zero</summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ModuleMetadataTableRow.Name">
            <summary>Index to the string heap</summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ModuleMetadataTableRow.Mvid">
            <summary>
            An index to the Guid heap, to distinguish between two versions of
            the same module
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ModuleMetadataTableRow.EncId">
            <summary>An index to the Guid heap, reserved shall be zero</summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ModuleMetadataTableRow.EncBaseId">
            <summary>An index to the Guid heap, reserved shall be zero</summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.ModuleRefMetadataTableRow">
            <summary>
            Created by a .module extern directive in the assembly
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.ModuleRefMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the ModuleRefMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ModuleRefMetadataTableRow.Name">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.NestedClassMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the NestedClassMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.NestedClassMetadataTableRow.NestedClass">
            <summary>
            An index in to the TypeDef table
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.NestedClassMetadataTableRow.EnclosingClass">
            <summary>
            An index in to teh TypeDef table
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.ParamMetadataTableRow">
            <summary>
            Represents a single entry in the Param Metadata table.
            </summary>
            <remarks>
            The In, Out and Optional modifiers are specified in the <see cref="P:TheBoxSoftware.Reflection.Core.COFF.ParamMetadataTableRow.Flags"/> property. Further,
            if it is defined as optional the constant values supplied are recorded in the Constants
            Metadata directory p209 of .NET IL Assembler book.
            
            The constant can be accessed but the value is only available on the signature blob which makes
            it a little more difficult to access the value.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.ParamMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the ParamMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ParamMetadataTableRow.Flags">
            <summary>
            A 2-byte bitmask of ParamAttributes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ParamMetadataTableRow.Sequence">
            <summary>
            The sequence of the parameter
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.ParamMetadataTableRow.Name">
            <summary>
            Index in to the string heap
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.PropertyMapMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the PropertyMapMetadataTableRow
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset for this row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.PropertyMapMetadataTableRow.Parent">
            <summary>
            An index in to the TypeDef table
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.PropertyMapMetadataTableRow.PropertyList">
            <summary>
            An index in to the Property table
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.PropertyMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the PropertyMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of this row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.PropertyMetadataTableRow.Flags">
            <summary>
            A 2-byte bitmask of PropertyAttributes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.PropertyMetadataTableRow.Name">
            <summary>
            An index in to the string heap
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.PropertyMetadataTableRow.Type">
            <summary>
            An index in to the blob heap for the signiture
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.StandAloneSigMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instnace of the StandAloneSigMetadataTableRow
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of teh file</param>
            <param name="offset">The offset for this row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.StandAloneSigMetadataTableRow.Signiture">
            <summary>
            An index in to the blob heap, which points to a signiture which is
            note referenced by a normal member
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.Streams">
            <summary>
            Enumeration of all the streams that can be located in a PE/COFF
            file.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.Streams.MetadataStream">
            <summary>
            The stream containing the .net metadata.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.Streams.StringStream">
            <summary>
            The stream containing the strings referenced by the metadata.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.Streams.BlobStream">
            <summary>
            The stream which contains the signiuture and other information
            for the metadata.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.Streams.USStream">
            <summary>
            The stream which contains the user strings referenced by the
            metadata.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.COFF.Streams.GuidStream">
            <summary>
            The stream which contains any referenced GUIDs in the metadata.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.StringStream">
            <summary>
            The string stream which stores the strings for all metadata names and text.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.StringStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the StringStream class.
            </summary>
            <param name="fileContents">The file this stream is a part of.</param>
            <param name="address">The start address of the string stream.</param>
            <param name="size">The size of the stream.</param>
            <exception cref="T:System.InvalidOperationException">
            The application encountered an invalid and unexpected character at the
            start of the stream.
            </exception>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.StringStream.GetString(System.Int32)">
            <summary>
            Retrieves the string from the stream at the specified index. This index
            is retrieved from the <see cref="!:StringIndex.Index"/> property where 
            implemented in the <see cref="!:MetadataTable"/> classes.
            </summary>
            <param name="index">The index.</param>
            <returns>The string at the specified index.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.StringStream.GetAllStrings">
            <summary>
            Returns all the strings stored in this stream.
            </summary>
            <returns>An array of strings in this stream.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.TypeDefMetadataTableRow">
            <remarks>
            Updated for 4-byte heap indexes
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.TypeDefMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises an instance of the TypeDefMetadataTableRow
            </summary>
            <param name="contents">The contents of the file</param>
            <param name="offset">The offset of the current row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.TypeDefMetadataTableRow.Flags">
            <summary>A 4-byte bitmask of TypeAttributes</summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.TypeDefMetadataTableRow.Name">
            <summary>An index in to the string heap</summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.TypeDefMetadataTableRow.Namespace">
            <summary>An index in to the string heap</summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.TypeDefMetadataTableRow.Extends">
            <summary>
            An index in to the TypeDef, TypeRef, or TypeSpec table, more precisely
            TypeDefOrRef coded index.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.TypeDefMetadataTableRow.FieldList">
            <summary>
            An index in to the Field table, marking the first of a continuous run
            of fields for the type. It continues until the smaller of, the last row
            in the table, the next run of fields.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.TypeDefMetadataTableRow.MethodList">
            <summary>An index in to the MethodDef table, continuos list as above.</summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.COFF.TypeRefMetadataTableRow">
            <remarks>
            Updated for 4-byte heap indexes
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.TypeRefMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the TypeRefMetadataTableRow class
            </summary>
            <param name="contents">The file contents</param>
            <param name="offset">The offset for this entry</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.TypeRefMetadataTableRow.ResolutionScope">
            <summary>
            An index in to a Module, ModuleRef, AssemblyRef, or TypeRef table, or null.
            More precisely a ResolutionScope
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.TypeRefMetadataTableRow.Name">
            <summary>An index in to the string heap</summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.TypeRefMetadataTableRow.Namespace">
            <summary>An index in to the string heap</summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.COFF.TypeSpecMetadataTableRow.#ctor(TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the TypeSpecMetadataTableRow class
            </summary>
            <param name="stream">The stream containing the metadata</param>
            <param name="contents">The contents of the data</param>
            <param name="offset">The offset of this row</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.COFF.TypeSpecMetadataTableRow.Signiture">
            <summary>
            An index in to the blob heap
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.Directory.Create(TheBoxSoftware.Reflection.Core.PE.DataDirectories,System.Byte[],System.Int32)">
            <summary>
            Factory method for instantiating different directories from the file
            </summary>
            <param name="directory">The type of directory to create</param>
            <param name="fileContents">The contents of the file being read</param>
            <param name="address">The address of the directory</param>
            <returns></returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.Directory.Name">
            <summary>
            The name of the directory
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.NotAManagedLibraryException">
            <summary>
            Represents an error in the application where someone has attempted
            to load a native or non-managed library.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.NotAManagedLibraryException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the NotAManagedLibraryException.
            </summary>
            <param name="message">The message describing the error.</param>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.Offset">
            <summary>
            Represents a cursor through a large file, the current value
            represents the current offset.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.Offset.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the Offset structure
            </summary>
            <param name="start">The starting offset</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.Offset.Shift(System.Int32)">
            <summary>
            Shifts the offset by the specified 'by' number, but returns the value
            before the shift operation.
            </summary>
            <param name="by">The number to shift the offset by</param>
            <returns>The current shift value before the offset is shifted</returns>
            <remarks>
            This method allows the shift of the offset at the same time as its use
            allowing the current offset and its progression to be linked more closely
            making it more readable.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.Offset.op_Implicit(TheBoxSoftware.Reflection.Core.Offset)~System.Int32">
            <summary>
            Implicit conversion to an integer
            </summary>
            <param name="offset">The offset that needs conversion</param>
            <returns>The converted integer value</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.Offset.op_Implicit(System.Int32)~TheBoxSoftware.Reflection.Core.Offset">
            <summary>
            Implicit conversion from an integer
            </summary>
            <param name="offset">The offset to initialise the offset to</param>
            <returns>The initialised offset</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.Offset.Current">
            <summary>
            The current value of the offset
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.PeCoffFile">
            <summary>
            Provides access to the details of a .NET PE/COFF file, implementation is from
            the pecoff_v8 Microsoft document.
            </summary>
            <seealso cref="T:TheBoxSoftware.Reflection.AssemblyDef" />
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.PeCoffFile.#ctor(System.String)">
            <summary>
            Initialises a new instance of the PeCoffFile
            </summary>
            <param name="filePath">The physical location of the file</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.PeCoffFile.GetMetadataDirectory">
            <summary>
            Helper method to obtain the .NET metadata directory
            </summary>
            <returns>The .NET metadata directory</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.PeCoffFile.FileAddressFromRVA(System.Int32)">
            <summary>
            Converts a Relative Virtual Address to a file offset
            </summary>
            <param name="rva">The RVA to convert</param>
            <returns>The file offset address</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.PeCoffFile.ReadFileContents">
            <summary>
            Reads the contents of the PeCoff file in to our custom data structures
            </summary>
            <exception Cref="NotAManagedLibraryException">
            Thrown when a file which is not a managed PE file is loaded.
            </exception>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.PeCoffFile.ReadSectionHeaders(System.UInt16,TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Reads the headers for all of the defined sections in the file
            </summary>
            <param name="numberOfSections">The number of sections in the file header to initialise.</param>
            <param name="offset">The offset to the section headers</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.PeCoffFile.ReadDirectories(System.Collections.Generic.Dictionary{TheBoxSoftware.Reflection.Core.PE.DataDirectories,TheBoxSoftware.Reflection.Core.PE.DataDirectory})">
            <summary>
            Reads the contents of the directories specified in the file header
            </summary>
            <param name="dataDirectories">The data directories to initialise in hte PE header.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.PeCoffFile.FileName">
            <summary>
            The full path and filename for the disk location of this PE/COFF file.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.PeCoffFile.SectionHeaders">
            <summary>
            The headers for all the sections defined in the file
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.PeCoffFile.Directories">
            <summary>
            All of the directories for the PE/COFF file.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.PeCoffFile.IsMetadataLoaded">
            <summary>
            Indicates if the metadata has been loaded in its entirety from the
            PE/COFF file.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.PeCoffFile.FileContents">
            <summary>
            The byte contents of the file.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.PeCoffFile.Map">
            <summary>
            Internal mapping of metadata to reflected definitions.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.PE.DataDirectories">
            <summary>
            Enumeration of all the available data directories in a MS PE/COFF file.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.PE.DataDirectory">
            <summary>
        A data directory entry is a row in the data directory table in a PE file that refers to one
        of 16 predefined tables.
      </summary><remarks>
        The table of directories start at offset 96 in a 32bit PE and 112 in a 64bit PE.
      </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.PE.DataDirectory.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.PE.DataDirectories)">
            <param name="data">The byte data to populate the instance with</param><param name="directory" /><exception cref="T:System.ArgumentException">Not enough byte data supplied</exception>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.PE.DataDirectory.#ctor(System.Byte[])">
            <summary>Constructor</summary><param name="data">The byte data to populate the instance with</param><exception cref="T:System.ArgumentException">Not enough byte data supplied</exception>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.PE.DataDirectory.VirtualAddress">
            <summary>
            Relative virtual address of the directory
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.PE.DataDirectory.Size">
            <summary>
            Size of directory in bytes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.PE.DataDirectory.Directory">
            <summary>
            The directory being represented
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Core.PE.DataDirectory.IsUsed">
            <summary>
            Boolean value indicating if this directory is in use
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.PE.FileHeader.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises the ImageFileHeader class and populates it with
            the specific data from the file contents
            </summary>
            <param name="fileContents">The contents of the file being read as an array</param>
            <param name="offset">The offset for the image file header</param>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Core.Version">
            <summary>
            Represents a version number
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.Version.Major">
            <summary>The major version number</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.Version.Minor">
            <summary>The minor version number</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.Version.Build">
            <summary>The build number</summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Core.Version.Revision">
            <summary>The build revision number</summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Version with the specified details
            </summary>
            <param name="major">The major number</param>
            <param name="minor">The minor number</param>
            <param name="build">The build number</param>
            <param name="revision">The build revision</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.Version.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new Version with the specified details
            </summary>
            <param name="major">The major number</param>
            <param name="minor">The minor number</param>
            <param name="build">The build number</param>
            <param name="revision">The build revision</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Core.Version.ToString">
            <summary>
            Returns a string representation of this version specified as
            "&gt;major&lt;.&gt;major&lt;.&gt;major&lt;.&gt;major&lt;"
            </summary>
            <returns>The string representation of this Version.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.DisplayNameSignitureConvertor">
            <summary>
            A <see cref="T:TheBoxSoftware.Reflection.Signitures.SignitureConvertor"/> implementation that creates user
            displayable names for types, methods and properties.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.DisplayNameSignitureConvertor.#ctor(TheBoxSoftware.Reflection.MethodDef,System.Boolean,System.Boolean)">
            <summary>
            Initialises a new instance of the DisplayNameSignitureConvertor.
            </summary>
            <param name="method">The method to obtain a display name for.</param>
            <param name="includeNamespace">Should the details of the namespace be included.</param>
            <param name="includeParamaters">Should the methods parameters be included.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.DisplayNameSignitureConvertor.#ctor(TheBoxSoftware.Reflection.MethodDef,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialises a new instance of the DisplayNameSignitureConvertor.
            </summary>
            <param name="method">The method to obtain a display name for.</param>
            <param name="includeNamespace">Should the details of the namespace be included.</param>
            <param name="includeParamaters">Should the methods parameters be included.</param>
            <param name="isFromExtendedType">Indicates this is an extension method from the type it is extending.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.DisplayNameSignitureConvertor.#ctor(TheBoxSoftware.Reflection.PropertyDef,System.Boolean,System.Boolean)">
            <summary>
            Initialises a new instance of the DisplayNameSignitureConvertor
            </summary>
            <param name="property">The property to obtain the display name for.</param>
            <param name="includeNamespace">Should the details of the namespace be included?</param>
            <param name="includeParamaters">Should the parameters for the property be included?</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.DisplayNameSignitureConvertor.#ctor(TheBoxSoftware.Reflection.TypeDef,System.Boolean)">
            <summary>
            Initialises a new instance of the DisplayNameSignitureConvertor.
            </summary>
            <param name="type">The type being converted.</param>
            <param name="includeNamespace">Should the details of the namespace be included in the display name.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.DisplayNameSignitureConvertor.#ctor">
            <summary>
            Initialises a new instance of the DisplayNameSignitureConvertor.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.DisplayNameSignitureConvertor.Convert">
            <summary>
            Implementation of the convert method, that is used to create a display
            version of the signiture this convertor has been instantiated with.
            </summary>
            <returns>The fully converted signiture as a string.</returns>
            <exception cref="T:TheBoxSoftware.Reflection.ReflectionException">
            Thrown when an error occurs while processing the display name, see the exception
            details for more information.
            </exception>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.DisplayNameSignitureConvertor.GetTypeName(System.Text.StringBuilder,TheBoxSoftware.Reflection.TypeRef)">
            <summary>
            Obtains the type name for the specified <see cref="T:TheBoxSoftware.Reflection.TypeRef"/>.
            </summary>
            <param name="sb">The current display name for the signiture to append the details to.</param>
            <param name="type">The type to obtain the display name for.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.DisplayNameSignitureConvertor.ConvertMVar(System.Text.StringBuilder,System.Int32,TheBoxSoftware.Reflection.ParamDef)">
            <summary>
            Converts a generic variable for display.
            </summary>
            <param name="sb">The current display name for the signiture to append details to.</param>
            <param name="sequence">The sequence number of the current generic variable.</param>
            <param name="parameter">The parameter definition information.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.DisplayNameSignitureConvertor.ConvertVar(System.Text.StringBuilder,System.Int32,TheBoxSoftware.Reflection.ParamDef)">
            <summary>
            Converts a generic variable for display.
            </summary>
            <param name="sb">The current display name for the signiture to append details to.</param>
            <param name="sequence">The sequence number of the current generic variable</param>
            <param name="parameter">The parameter definition information.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.DisplayNameSignitureConvertor.ConvertArray(System.Text.StringBuilder,TheBoxSoftware.Reflection.TypeRef,TheBoxSoftware.Reflection.Signitures.ArrayShapeSignitureToken)">
            <summary>
            Overridden convertor for arrays. Converts the <see cref="T:TheBoxSoftware.Reflection.Signitures.ArrayShapeSignitureToken"/>
            to its correct display name equivelant.
            </summary>
            <param name="sb">The string being constructed containing the display name.</param>
            <param name="resolvedType">The type the parameter has been resolved to</param>
            <param name="shape">The signiture token detailing the shape of the array.</param>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.ArrayShapeSignitureToken">
            <summary>
            A signiture that describes the shape of an array as defined.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ArrayShapeSignitureToken.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the ArrayShapeSignitureToken which reads the array share
            signiture from the provided <paramref name="signiture"/> at <paramref name="offset"/>.
            </summary>
            <param name="signiture">The signiture blob to read this token from.</param>
            <param name="offset">The offset where this roken begins.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ArrayShapeSignitureToken.ToString">
            <summary>
            Produces a string representation e.g. '[1..6, 5, ,]' of the array 
            shape token.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.ArrayShapeSignitureToken.Rank">
            <summary>
            The number of ranks in the array shape.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.ArrayShapeSignitureToken.Sizes">
            <summary>
            The defined sizes
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.ArrayShapeSignitureToken.LoBounds">
            <summary>
            The values of those low boundaries.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.CallingConventions.Default">
            <summary>
            Default ("normal") method with a fixed-length argument list. ILAsm has no
            keyword for this calling convention.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.CallingConventions.VarArg">
            <summary>
            Method with a variable-length argument list. The ILAsm keyword is <i>vararg</i>.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.CallingConventions.Field">
            <summary>
            Field. ILAsm has no keyword for this calling convention.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.CallingConventions.LocalSig">
            <summary>
            Local variables. ILAsm has no keyword for this calling convention.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.CallingConventions.Property">
            <summary>
            Property. ILAsm has no keyword for this calling convention.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.CallingConventions.Unmanaged">
            <summary>
            Unmanaged calling convention, not currently used by the runtime and not
            recognised by ILAsm
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.CallingConventions.HasThis">
            <summary>
            Instance method that has an instance pointer (this) as an implicit first
            argument.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.CallingConventions.ExplicitThis">
            <summary>
            Method call signiture. This first explicitly specified parameter is the
            instance pointer. The ILAsm keywork is <i>explicit</i>.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.CallingConventionSignitureToken">
            <summary>
            Represents a calling convention in a signiture.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.CallingConventionSignitureToken.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of CallingConventionSignitureToken from the signiture blob
            at the specified offset.
            </summary>
            <param name="signiture">The signiture blob to read from.</param>
            <param name="offset">The offset in the blob to read from.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.CallingConventionSignitureToken.ToString">
            <summary>
            Produces a string representation of the calling convention token.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.CallingConventionSignitureToken.Convention">
            <summary>
            Describes the convention used in this token.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.ConstraintSignitureToken">
            <summary>
            Represents a constraint in a signiture as a token. Constraints can only be
            <see cref="F:TheBoxSoftware.Reflection.Signitures.ElementTypes.Pinned"/>.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ConstraintSignitureToken.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the ConstraintSignitureToken from the <paramref name="signiture"/>
            at the specified <paramref name="offset"/>.
            </summary>
            <param name="signiture">The signiture to load from.</param>
            <param name="offset">The offset in the signiture.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ConstraintSignitureToken.IsToken(System.Byte[],System.Int32)">
            <summary>
            Checks if the entry at <paramref name="offset"/> in the <paramref name="signiture"/>
            heap is a token.
            </summary>
            <param name="signiture">The signiture to check.</param>
            <param name="offset">The offset in the signiture.</param>
            <returns>True if it is a token else false.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ConstraintSignitureToken.ToString">
            <summary>
            Produces a string representation of the constraint token [Constraint: {ElementType}]
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.ConstraintSignitureToken.Constraint">
            <summary>
            The constraint this token represents.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.CountSignitureToken.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new Count token from the provided <paramref name="signiture"/> at 
            <paramref name="offset"/>.
            </summary>
            <param name="signiture">The signiture blob.</param>
            <param name="offset">The offset in the signiture.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.CountSignitureToken.Count">
            <summary>
            ?
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.CustomAttributeSigniture">
            <summary>
            The signiture for a custom attribute as described in section 23.3 of
            ECMA 335.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.CustomAttributeSigniture.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Byte[])">
            <summary>
            Initialises a new instance of the CustomAttributeSigniture class.
            </summary>
            <param name="file">The file the signiture is defined in.</param>
            <param name="signiture">The byte contents of the signiture.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a value for the prolog differs from 0x0001. This indicates
            the incorrect signiture type is being read or the signiture contents
            are invalid.
            </exception>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.CustomModifierToken">
            <summary>
            A token that describes a modified reference to a TypeDef, TypeRef or TypeSpec
            entry in the metadata tables.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.CustomModifierToken.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a CustomModifier token from the <paramref name="signiture"/> blob at the
            specified <paramref name="offset"/>.
            </summary>
            <param name="signiture">The signiture blob.</param>
            <param name="offset">The offset in the signiture.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.CustomModifierToken.ReadEncodedDefOrRefToken(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Reads a DefOrRefToken from the <paramref name="signiture"/> which defines a compressed
            form of TypeRef, TypeSpec, or TypeDef token.
            </summary>
            <param name="signiture">The signiture blob.</param>
            <param name="offset">The offset in the signiture.</param>
            <returns></returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.CustomModifierToken.IsToken(System.Byte[],System.Int32)">
            <summary>
            Checks if the next token at the current offset can potentially be a
            CustomModifierToken.
            </summary>
            <param name="signiture">The signiture to preview</param>
            <param name="offset">The current offset in the signiture</param>
            <returns></returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.CustomModifierToken.ToString">
            <summary>
            Produces a string representaion of the custom modifier token.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.CustomModifierToken.Modifier">
            <summary>
            The modifer for the token either CModOptional or CModRequired.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.CustomModifierToken.Index">
            <summary>
            The index to the TypeDef, TypeRef or TypeSpec metadata table.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.ElementTypeSignitureToken">
            <summary>
            <para>
            Class that represents the simplist single element when a type is involved in
            a signiture. Where for example a type can be represented simply as a base type
            a class, or a valuetype, the ElementTypeSignitureToken will contain the relevant
            details about it and provide a mechanism for resolving the type.
            </para>
            <para>
            Where a type is described by more than a single element; that element will have
            its superflous detail described in the <see cref="T:TheBoxSoftware.Reflection.Signitures.TypeSignitureToken"/> class.
            </para>
            </summary>
            <seealso cref="T:TheBoxSoftware.Reflection.Signitures.TypeSignitureToken"/>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ElementTypeSignitureToken.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Instantiates a new instance of the ElementTypeSignitureToken class.
            </summary>
            <param name="file">The file which contains the signiture definition.</param>
            <param name="signiture">The signiture where this token is defined.</param>
            <param name="offset">The current offset in the signiture to read the token.</param>
            <remarks>
            <para>
            An ElementTypeSignitureToken details the element of a Type signiture. These
            elements are defined in section 23.1.16 in ECMA 335. Where a type can contain
            multiple ElementTypeSignitureTokens each building up to reveal more information
            about the type. This class will only ever provide a single item of detail.
            </para>
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ElementTypeSignitureToken.IsToken(System.Byte[],System.Int32,TheBoxSoftware.Reflection.Signitures.ElementTypes)">
            <summary>
            Checks if the token a the <paramref name="offset"/> in the <paramref name="signiture"/>
            is one of the <paramref name="allowed"/> element types.
            </summary>
            <param name="signiture">The signiture blob.</param>
            <param name="offset">The offset in the signiture.</param>
            <param name="allowed">The allowed element type flags.</param>
            <returns>True of false</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ElementTypeSignitureToken.ResolveToken(TheBoxSoftware.Reflection.AssemblyDef)">
            <summary>
            Resolves a token (Defintion) in the provided <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly reference to resolve the token with.</param>
            <returns>The resolved type reference.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ElementTypeSignitureToken.ToString">
            <summary>
            Produces a string representation of the element type token.
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.ElementTypeSignitureToken.Token">
            <summary>
            The token parameter to this element type, this is not always relevant
            so can be zero.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.ElementTypeSignitureToken.Definition">
            <summary>
            The definition of the specified element. This is populated when the element
            is a well known system type. Token will be 0;
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.ElementTypeSignitureToken.ElementType">
            <summary>
            The enumerated value indicating which type of element is contained in this token.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.FieldSigniture">
            <summary>
            Describes a field signiture, which is specified in the ECMA 23.2.4.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.FieldSigniture.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Byte[])">
            <summary>
            Initialises a field signiture from the specified <paramref name="signiture"/> blob.
            </summary>
            <param name="file">The PeCoffFile that contains the definition.</param>
            <param name="signiture">The signiture blob.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.FieldSigniture.ToString">
            <summary>
            Produces a string representation of the field signiture.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.GenericArgumentCountSignitureToken">
            <summary>
            An Int32 numeric value that indicates the number of generics arguments in a signiture.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.GenericArgumentCountSignitureToken.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initiailses a GenericArgumentCount token from the <paramref name="signiture"/> at the
            specified <paramref name="offset"/>.
            </summary>
            <param name="signiture">The signiture blob.</param>
            <param name="offset">The offset  in the signiture blob.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.GenericArgumentCountSignitureToken.ToString">
            <summary>
            Produces a string representation of this generic argument count token.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.GenericArgumentCountSignitureToken.Count">
            <summary>
            The number of generic arguments.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.GenericParamaterCountSignitureToken">
            <summary>
            A token that represents the number of generic parameters.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.GenericParamaterCountSignitureToken.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a GenericParameterCount token from the <paramref name="signiture"/> at
            the specified <paramref name="offset"/>.
            </summary>
            <param name="signiture">The signiture blob.</param>
            <param name="offset">The offset in the signiture.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.GenericParamaterCountSignitureToken.ToString">
            <summary>
            Produces a string representation of the generic parameter count token.
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.GenericParamaterCountSignitureToken.Count">
            <summary>
            The number of generic parameters in this signiture.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.LocalVariableSigniture">
            <summary>
            Represents a local variable signiture in the signiture blob. Details of the signiture are
            available in the ECMA at 23.2.6.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.LocalVariableSigniture.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Byte[])">
            <summary>
            Initialise a new instance of a local variable signiture from the <paramref name="signiture"/>
            provided.
            </summary>
            <param name="file">The PeCoffFile that contains the signiture block.</param>
            <param name="signiture">The signiture blob.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.LocalVariableSigniture.ToString">
            <summary>
            Produces a string representation of the local variable signiture.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.MethodDefSigniture">
            <summary>
            A signiture for a method definition as described in section 23.2.1 in
            ECMA 335.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.MethodDefSigniture.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Byte[])">
            <summary>
            Initialises a new instance of the MethoDefSigniture class.
            </summary>
            <param name="file">The file the signiture is defined in.</param>
            <param name="signiture">The byte contents of the signiture.</param>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.ParameterCountSignitureToken">
            <summary>
            A representation of a ParameterCount token in a signiture.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ParameterCountSignitureToken.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new paramater count token from the provided <paramref name="signiture"/>
            at the specified <paramref name="offset"/>.
            </summary>
            <param name="signiture">The signiture blob.</param>
            <param name="offset">The offset in the signiture.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ParameterCountSignitureToken.ToString">
            <summary>
            Produces a string representation of the parameter count token.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.ParameterCountSignitureToken.Count">
            <summary>
            The number of parameters.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.ParamSignitureToken">
            <summary>
            This class is able to parse and store details about Param entries in signitures. The
            Param signiture type is detailed in ECMA 335 at section 23.2.10.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ParamSignitureToken.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the ParamSignitureToken class from the provided <paramref name="signiture"/>
            at the specified <paramref name="offset"/>.
            </summary>
            <param name="file">The file which defines the signiture.</param>
            <param name="signiture">The contents of the signiture.</param>
            <param name="offset">The offset of the current token.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ParamSignitureToken.ToString">
            <summary>
            produces a string representation of the param signiture token.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.ParamSignitureToken.ElementType">
            <summary>
            The tokenised element from this parameter... may neeed to rethinked...
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.ParamSignitureToken.IsByRef">
            <summary>
            Indicates if the ByRef ElementTypes entry is marked on this parameter.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.ParamSignitureToken.HasCustomModifier">
            <summary>
            Indicates that this parameter has custom modifiers.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.PrologSignitureToken">
            <summary>
            A class which represents a prolog for a <see cref="T:TheBoxSoftware.Reflection.Signitures.CustomAttributeSigniture"/>.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.PrologSignitureToken.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the PrologSignitureToken class.
            </summary>
            <param name="signiture">The byte contents of the signiture.</param>
            <param name="offset">The start offset of the this token.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.PrologSignitureToken.ToString">
            <summary>
            Produces a string representation of the prolog token.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.PrologSignitureToken.Value">
            <summary>
            The value of the token.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.PropertySigniture">
            <summary>
            A rerepresentation of the property signiture as described in ECMA 23.2.5.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.PropertySigniture.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Byte[])">
            <summary>
            Initialises a new instance of the property signiture from the provided <paramref name="signiture"/>.
            </summary>
            <param name="file">The file that contains the signiture.</param>
            <param name="signiture">The signiture blob.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.PropertySigniture.ToString">
            <summary>
            Produces a string representaion of the property signiture.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.ReturnTypeSignitureToken">
            <summary>
            Represents the group of SignitureTokens that are read together.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ReturnTypeSignitureToken.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the ReturnTypeSignitureToken class.
            </summary>
            <param name="signiture">The signiture to read.</param>
            <param name="offset">The offset to start processing at.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.ReturnTypeSignitureToken.ToString">
            <summary>
            Produces a string representation of the return type signiture.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.SentinalSignitureToken">
            <summary>
            Represents a sentinal signiture token.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.SentinalSignitureToken.#ctor(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new instance of the sentinal signiture from the provided <paramref name="signiture"/>
            at the specified <paramref name="offset"/>.
            </summary>
            <param name="signiture">The signiture blob.</param>
            <param name="offset">The offset in the signiture.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.SentinalSignitureToken.ToString">
            <summary>
            Produces a string representation of the sentinal signiture token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.Signiture.#ctor(TheBoxSoftware.Reflection.Signitures.Signitures)">
            <summary>
            Initialises a new instance of the Signiture class.
            </summary>
            <param name="tokenType">The type of signiture being represented.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.Signiture.Create(System.Byte[],TheBoxSoftware.Reflection.Core.Offset,TheBoxSoftware.Reflection.Core.PeCoffFile,TheBoxSoftware.Reflection.Signitures.Signitures)">
            <summary>
            Factory method for creating new Signitures.
            </summary>
            <param name="fileContents">The contents of the library the signiture is being read from</param>
            <param name="offset">The offset to the start of the signiture</param>
            <param name="file">The PeCoffFile that is being read (same as file contents)</param>
            <param name="tokenType">The type of signiture being read.</param>
            <returns></returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.Signiture.GetParameterTokens">
            <summary>
            Returns a collection of all the parameter tokens defined in this
            signiture.
            </summary>
            <returns>A collection of parameter tokens.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.Signiture.GetReturnTypeToken">
            <summary>
            Returns the token that describes the return type defined in the signiture.
            </summary>
            <returns>The Token or null if no return type defined.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.Signiture.Type">
            <summary>
            Describes the type of signiture.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.SignitureConvertor">
            <summary>
            A base implementation of a class that converts a signiture
            to another medium.
            </summary>
            <seealso cref="T:TheBoxSoftware.Reflection.Comments.CRefPath"/>
            <seealso cref="!:TheBoxSoftware.Reflection.DisplayNameSignitureConvertor"/>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.SignitureConvertor.Convert(TheBoxSoftware.Reflection.MethodDef)">
            <summary>
            Converts the method parameters to a cref path implementation, this in itself
            is not enough. This is used by the cref parse methods.
            </summary>
            <param name="method">The method to convert the parameters for.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.SignitureConvertor.Convert(System.Text.StringBuilder,TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.ParamDef,TheBoxSoftware.Reflection.Signitures.SignitureToken,TheBoxSoftware.Reflection.Signitures.ElementTypes,TheBoxSoftware.Reflection.TypeRef)">
            <summary>
            Method which performs the actual conversion of a signiture to a cref string.
            </summary>
            <param name="sb">The string builder to hold the converted text</param>
            <param name="assembly">The assembly the current parameter is defined in</param>
            <param name="param">The parameter definition, required for token resolution</param>
            <param name="currentToken">The current token to converty</param>
            <param name="elementType">The type of element the token represents</param>
            <param name="resolvedType">The resolved type for this token.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.SignitureConvertor.GetTypeName(System.Text.StringBuilder,TheBoxSoftware.Reflection.TypeRef)">
            <summary>
            Obtains the type name for the specified <see cref="T:TheBoxSoftware.Reflection.TypeRef"/>.
            </summary>
            <param name="sb">The current cref name for the signiture to append the details to.</param>
            <param name="type">The type to obtain the display name for.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.SignitureConvertor.ConvertVar(System.Text.StringBuilder,System.Int32,TheBoxSoftware.Reflection.ParamDef)">
            <summary>
            Converts a generic variable for cref.
            </summary>
            <param name="sb">The current cref name for the signiture to append details to.</param>
            <param name="sequence">The sequence number of the current generic variable</param>
            <param name="parameter">The parameter definition information.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.SignitureConvertor.ConvertMVar(System.Text.StringBuilder,System.Int32,TheBoxSoftware.Reflection.ParamDef)">
            <summary>
            Converts a generic variable for cref.
            </summary>
            <param name="sb">The current cref name for the signiture to append details to.</param>
            <param name="sequence">The sequence number of the current generic variable</param>
            <param name="parameter">The parameter definition information.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.SignitureConvertor.ConvertArray(System.Text.StringBuilder,TheBoxSoftware.Reflection.TypeRef,TheBoxSoftware.Reflection.Signitures.ArrayShapeSignitureToken)">
            <summary>
            Overridden convertor for arrays. Converts the <see cref="T:TheBoxSoftware.Reflection.Signitures.ArrayShapeSignitureToken"/>
            to its correct cref name equivelant.
            </summary>
            <param name="sb">The string being constructed containing the cref name.</param>
            <param name="resolvedType">The type the parameter has been resolved to</param>
            <param name="shape">The signiture token detailing the shape of the array.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.SignitureConvertor.Namespace">
            <summary>
            Gets or sets a string that indicates the namespace the type parsed from the cref
            path resides in.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.SignitureConvertor.TypeName">
            <summary>
            Gets or sets a string that indicates the name of the type from the CRef path.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.SignitureConvertor.ElementName">
            <summary>
            Gets or sets a string that is the value of the element name from the cref
            path.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.SignitureConvertor.Parameters">
            <summary>
            A string representing the parameter section of the CRefPath.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.Signitures">
            <summary>
            Enumeration of available major signiture types that can be defined
            in a .net assembly.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.Signitures.MethodDef">
            <summary>
            Signiture which describes the signiture or of a method or
            global function.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.Signitures.MethodRef">
            <summary>
            Signiture which describes a call signiture of a method. Normally,
            this call signiture shall match exactly the Signiture specified
            in the definition of the target method.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.Signitures.Field">
            <summary>
            Signiture which captures a fields definition.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.Signitures.Property">
            <summary>
            Signiture which captures a property definition. This includes details
            of the getter and setter methods.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.Signitures.LocalVariable">
            <summary>
            Signiture which captures the types of all the local variables in a
            method.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.Signitures.TypeSpecification">
            <summary>
            Signiture which captures a desription for a type.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.Signitures.MethodSpecification">
            <summary>
            Signiture which captures a description of a generic method.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Signitures.Signitures.CustomAttribute">
            <summary>
            Signiture which captures the values defined against an attribute
            decleration.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.SignitureToken.#ctor(TheBoxSoftware.Reflection.Signitures.SignitureTokens)">
            <summary>
            Initialises a new instance of the SignitureToken class.
            </summary>
            <param name="tokenType">The type of token.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.SignitureToken.GetCompressedValue(System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Returns the uncompressed value from a compressed field.
            </summary>
            <param name="contents">The contents of the signiture</param>
            <param name="offset">The offset of the values first byte</param>
            <returns>The uncompressed value</returns>
            <exception cref="T:System.InvalidOperationException">
            The first byte of the compressed value is not a valid value.
            </exception>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.SignitureToken.TokenType">
            <summary>
            Indicates the type of SignitureToken
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.SignitureTokenContainer">
            <summary>
            Represents a container for one or more SignitureToken instances. This is
            a constuct that allows groups of tokens that are always parsed together to
            be represented and contained via a single class.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.SignitureTokenContainer.#ctor(TheBoxSoftware.Reflection.Signitures.SignitureTokens)">
            <summary>
            Initialises a new instance of the SignitureTokenContainer class.
            </summary>
            <param name="tokenType">The type of signiture token represented.</param>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.TypeDetails">
            <summary>
            Provides details about a type and its surounding information.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.TypeDetails.Type">
            <summary>
            The major type details this could be any TypeRef based class. Including
            generic parameter, TypeSpec and TypeDef and Ref instances.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.TypeDetails.ArrayOf">
            <summary>
            The type details for the array. This is relevant when the type has the
            IsArray property set to true. Further this Type property is no longer
            valid.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.TypeDetails.IsGenericInstance">
            <summary>
            Indicates that the <see cref="P:TheBoxSoftware.Reflection.Signitures.TypeDetails.Type"/> is a generic type and has one or
            more arguments specified in <see cref="P:TheBoxSoftware.Reflection.Signitures.TypeDetails.GenericParameters"/>.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.TypeSignitureToken">
            <summary>
            <para>Represents an element of a signiture that can be used to resolve back to a type,
            however the type it resolves back to can be one of many things; see ECMA 335
            23.2.12.
            </para>
            <para>
            A type can be represented by one or more tokens, hence this token derives from
            <see cref="T:TheBoxSoftware.Reflection.Signitures.SignitureTokenContainer"/>. However it will always have an <see cref="T:TheBoxSoftware.Reflection.Signitures.ElementTypeSignitureToken"/>
            which should allow any resolving to be perfomed more easily.
            </para>
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.TypeSignitureToken.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Byte[],TheBoxSoftware.Reflection.Core.Offset)">
            <summary>
            Initialises a new TypeSigniture from the <paramref name="signiture"/> starting at the
            specified <paramref name="offset"/>.
            </summary>
            <param name="signiture">The signiture to parse the type from.</param>
            <param name="offset">The offset to start reading from.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.TypeSignitureToken.ResolveType(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.ReflectedMember)">
            <summary>
            Attempts to resolve the type.
            </summary>
            <param name="assembly"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.TypeSignitureToken.ResolveType(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.ParamDef)">
            <summary>
            Attempts to resolve the type.
            </summary>
            <param name="assembly"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.TypeSignitureToken.ToString">
            <summary>
            Produces a string representation of the Type token.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.TypeSignitureToken.ElementType">
            <summary>
            The ElementType details for this TypeSignitureToken
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Signitures.TypeSpecificationSigniture">
            <summary>
            Represents a signiture for a type specification as detailed in
            section 23.2.14 in ECMA 335.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.TypeSpecificationSigniture.#ctor(TheBoxSoftware.Reflection.Core.PeCoffFile,System.Byte[])">
            <summary>
            Instantiates a new instance of the TypeSpecificationSigniture class.
            </summary>
            <param name="file">The file containing the signiture</param>
            <param name="signiture">The actual signiture contents.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Signitures.TypeSpecificationSigniture.GetTypeDetails(TheBoxSoftware.Reflection.ReflectedMember)">
            <summary>
            Obtains the details of the type.
            </summary>
            <param name="member">The member to resolve against.</param>
            <returns>The details of the type having the specification.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Signitures.TypeSpecificationSigniture.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.EventDef">
            <summary>
            Represents a single event for a type. An event is made up from one or
            two MethodDef entries in the type. These are generally prefixed with
            add_ and remove_. This class allows those events to be treated as a
            single unit.
            </summary>
            <seealso cref="T:TheBoxSoftware.Reflection.MethodDef"/>
        </member>
        <member name="M:TheBoxSoftware.Reflection.EventDef.CreateFromMetadata(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.TypeDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.Core.COFF.EventMetadataTableRow)">
            <summary>
            Factory method for instantiating an event from the details provided 
            in the metadata.
            </summary>
            <param name="assembly">The assembly the event is defined in.</param>
            <param name="container">The containing type for the event.</param>
            <param name="metadata">The metadata directory the details are stored in.</param>
            <param name="row">The row that provides access to the details for this event.</param>
            <returns>An instantiated EventDef instance.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.EventDef.Type">
            <summary>
            The type which contains this event.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.EventDef.GetInternalName(System.String)">
            <summary>
            Gets a version of the events name that can be checked against the events method
            names (add, remove) in the owning type.
            </summary>
            <returns>A string containing the implementing method name</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.EventDef.GetAddEventMethod">
            <summary>
            Attemps to find the add method for this event from its
            containing type.
            </summary>
            <returns>
            The method defenition for add portion of the event or null
            if not found.
            </returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.EventDef.GetRemoveEventMethod">
            <summary>
            Attemps to find the remove method for this event from its
            containing type.
            </summary>
            <returns>
            The method defenition for remove portion of the event or null
            if not found.
            </returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.FieldDef">
            <summary>
            Describes the construction of a field in the CLR metadata.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.FieldDef.CreateFromMetadata(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.TypeDef,TheBoxSoftware.Reflection.Core.COFF.FieldMetadataTableRow)">
            <summary>
            Initialises a new instance of the FieldDef class based on the metadata provided
            </summary>
            <param name="assembly">The assembly that the field resides in</param>
            <param name="container">The type this field is contained in</param>
            <param name="row">The metadata row describing the field</param>
            <returns>The initialised field</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.FieldDef.IsSystemGenerated">
            <summary>
            Indicates if this field is system generated. .NET creates backing fields
            in certain situations.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.FieldDef.Flags">
            <summary>
            The flags detailing information about the field
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.FieldDef.Constants">
            <summary>
            TODO: Document
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.FieldDef.IsConstant">
            <summary>
            Indicates if the field is declared as a constant.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.FlowControl">
            <summary>
            Describes how the instruction effects the flow of execution.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.GenericTypeRef">
            <summary>
            A class that represents a generic type; generic types are defined on
            types and methods. These types however will never resolve to an actual
            type instance because they are determined at call time, not at definition.
            </summary>
            <seealso cref="T:TheBoxSoftware.Reflection.TypeDef" />
            <seealso cref="T:TheBoxSoftware.Reflection.MethodDef" />
        </member>
        <member name="M:TheBoxSoftware.Reflection.GenericTypeRef.CreateFromMetadata(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.Core.COFF.GenericParamMetadataTableRow)">
            <summary>
            Initialises and populates a new GenericTypeRef instance based on the details
            provided in the metadata row.
            </summary>
            <param name="assembly">The assembly the type is defined in.</param>
            <param name="metadata">The metadata directory</param>
            <param name="row">The metadata row.</param>
            <returns>The populated instance.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.GenericTypeRef.Sequence">
            <summary>
            A number that represents the location in the generic type sequence
            this GenericTypeRef resides.
            </summary>
            <remarks>
            When multiple generic types are defined against a method or type, the
            number is used by the metadata to distinguish which type is being called
            or passed in signitures.
            </remarks>
        </member>
        <member name="T:TheBoxSoftware.Reflection.ILInstruction">
            <summary>
            Represents a single Intermediate Language Instruction
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode)">
            <summary>
            Initialises a new instance of the ILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ILInstruction.OpCode">
            <summary>
            The OpCode of the IL Instruction
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.InlineNoneILInstruction">
            <summary>
            Represents an IL Instruction of Type InlineNone
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineNoneILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode)">
            <summary>
            Initialises a new instance of the InlineNoneILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ArgInlineNoneILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode)">
            <summary>
            Initialises a new instance of the InlineNoneILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineBrTargetILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode,System.Int32)">
            <summary>
            Initialises a new instance of the InlineBrTargetILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
            <param name="target">The offset target to break to</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineBrTargetILInstruction.Target">
            <summary>
            The target offset for this instruction
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ShortInlineIILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode,System.Byte)">
            <summary>
            Initialises a new instance of the ShortInlineIILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
            <param name="target">The short target offset to </param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ShortInlineIILInstruction.Constant">
            <summary>
            The constant being pushed on to the stack in this operation
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ShortInlineVarILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode,System.Byte)">
            <summary>
            Initialises a new instance of the ShortInlineVarILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
            <param name="target">The short target offset to </param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ShortInlineVarILInstruction.Constant">
            <summary>
            The constant being pushed on to the stack in this operation
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ShortInlineRILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode,System.Single)">
            <summary>
            Initialises a new instance of the ShortInlineRILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
            <param name="target">The short target offset to </param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ShortInlineRILInstruction.Constant">
            <summary>
            The constant being pushed on to the stack in this operation
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineIILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode,System.UInt32)">
            <summary>
            Initialises a new instance of the InlineIILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
            <param name="constant">The integer constant to be pushed on to the stack</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineIILInstruction.Constant">
            <summary>
            The integer constant to be pushed on to the stack
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineVarILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode,System.UInt16)">
            <summary>
            Initialises a new instance of the InlineVarILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
            <param name="constant">The integer constant to be pushed on to the stack</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineVarILInstruction.Constant">
            <summary>
            The integer constant to be pushed on to the stack
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineStringILInstruction.#ctor(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.OpCode,System.Int32)">
            <summary>
            Initialises a new instance of the InlineVarILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
            <param name="constant">The integer constant to be pushed on to the stack</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineStringILInstruction.UDStringToken">
            <summary>
            The integer constant to be pushed on to the stack
            </summary>
            <remarks>
            THIS WILL BE REMOVED WHEN THE STRING IS PROPERLY LOADED
            </remarks>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineStringILInstruction.String">
            <summary>
            The string being loaded by the instruction
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineSigILInstruction.#ctor(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.OpCode,System.Int32)">
            <summary>
            Initialises a new instance of the InlineSigILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
            <param name="constant">The integer constant to be pushed on to the stack</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineSigILInstruction.SignitureToken">
            <summary>
            The integer constant to be pushed on to the stack
            </summary>
            <remarks>
            THIS WILL BE REMOVED WHEN THE STRING IS PROPERLY LOADED
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineRILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode,System.Double)">
            <summary>
            Initialises a new instance of the InlineRILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
            <param name="constant">The integer constant to be pushed on to the stack</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineRILInstruction.Constant">
            <summary>
            The integer constant to be pushed on to the stack
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineI8ILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode,System.UInt64)">
            <summary>
            Initialises a new instance of the InlineIILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
            <param name="constant">The long constant to be pushed on to the stack</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineI8ILInstruction.Constant">
            <summary>
            The long constant to be pushed on to the stack
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.ShortInlineBrTargetILInstruction">
            <summary>
            Represents an IL instruction of type ShortInlineBrTarget
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ShortInlineBrTargetILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode,System.Byte)">
            <summary>
            Initialises a new instance of the ShortInlineBrTargetILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
            <param name="target">The targetes offset</param>
        </member>
        <member name="T:TheBoxSoftware.Reflection.InlineMethodILInstruction">
            <summary>
            Represents an IL instruction of type InlineMethod
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineMethodILInstruction.#ctor(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.OpCode,System.Int32)">
            <summary>
            Initialises a new instance of the InlineMethodILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineMethodILInstruction.Method">
            <summary>
            The definition of the method this instruction calls
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.InlineTypeILInstruction">
            <summary>
            Represents an IL instruction of type InlineMethod
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineTypeILInstruction.#ctor(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.OpCode,System.Int32)">
            <summary>
            Initialises a new instance of the InlineMethodILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineTypeILInstruction.Type">
            <summary>
            The definition of the method this instruction calls
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.InlineTokenILInstruction">
            <summary>
            Represents an IL instruction of type InlineMethod
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineTokenILInstruction.#ctor(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.OpCode,System.Int32)">
            <summary>
            Initialises a new instance of the InlineMethodILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineTokenILInstruction.Type">
            <summary>
            The definition of the method this instruction calls
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.InlineFieldILInstruction">
            <summary>
            Represents an IL instruction of type InlineField
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineFieldILInstruction.#ctor(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.OpCode,System.Int32)">
            <summary>
            Initialises a new instance of the InlineMethodILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineFieldILInstruction.Field">
            <summary>
            The definition of the method this instruction calls
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.InlineSwitchILInstruction">
            <summary>
            Represents an IL instruction of type InlineSwitch
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.InlineSwitchILInstruction.#ctor(TheBoxSoftware.Reflection.OpCode,System.Int32[])">
            <summary>
            Initialises a new instance of the InlineSwitchILInstruction class
            </summary>
            <param name="code">The OpCode describing the operation of the instruction</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.InlineSwitchILInstruction.JumpTargets">
            <summary>
            The offset targets for each of the case statements in the switch operation
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.MemberRef">
            <summary>
            Represents an instance of a Member that is referenced from an external source.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MemberRef.CreateFromMetadata(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.Core.COFF.MemberRefMetadataTableRow)">
            <summary>
            Factor method for instantiating and populating MemberRef instances from
            Metadata.
            </summary>
            <param name="assembly">The assembly the reference is defined in.</param>
            <param name="metadata">The metadata the reference is detailed in.</param>
            <param name="row">The actual metadata row with the details of the member.</param>
            <returns>An instantiated MemberRef instance.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MemberRef.Type">
            <summary>
            Gets or sets the type which defines this member
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MemberRef.SignitureBlob">
            <summary>
            Obtains the index in the BlobStream where the methods signiture
            is stored.
            </summary>
            <seealso cref="P:TheBoxSoftware.Reflection.MemberRef.Signiture"/>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MemberRef.IsConstructor">
            <summary>
            Gets a value indicating if this member is a constructor.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MemberRef.IsOperator">
            <summary>
            Gets a value indicating if this method referes to an operator overloaded
            method implementation.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MemberRef.Signiture">
            <summary>
            Gets the signiture defined for this member.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.MemberTypes">
            <summary>
            Enumeration of members that can be defined in an assembly.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.MetadataToDefinitionMap">
            <summary>
            A mapper class that allows the quick retrieval of metadata or
            definition information, from either direction.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MetadataToDefinitionMap.Add(TheBoxSoftware.Reflection.Core.COFF.MetadataTables,TheBoxSoftware.Reflection.Core.COFF.MetadataRow,TheBoxSoftware.Reflection.ReflectedMember)">
            <summary>
            Adds a new entry in to the definition map.
            </summary>
            <param name="table">The table this row and definition are from</param>
            <param name="metadataRow">The row the definition is associated with</param>
            <param name="definition">The definition the row is associated with</param>
            <remarks>
            If a table is created and no unique key is provided for it, you will not be able to use
            a unique key for that table at any point.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MetadataToDefinitionMap.GetDefinition(TheBoxSoftware.Reflection.Core.COFF.MetadataTables,TheBoxSoftware.Reflection.Core.COFF.MetadataRow)">
            <summary>
            Obatains the definition for the specified metadataRow and table.
            </summary>
            <param name="table">The table the row and definition are from</param>
            <param name="metadataRow">The row the definition was instantiated from</param>
            <returns>The definition or null if not found</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MetadataToDefinitionMap.GetWellKnownType(System.String,System.String)">
            <summary>
            Obtains the definition for the specified metadata table with the specified
            uniqueId.
            </summary>
            <param name="name">The name of the well known type</param>
            <param name="space">The namespace for the well known type</param>
            <returns>The found definition or null if not found</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MetadataToDefinitionMap.Assembly">
            <summary>
            The instance of the Assembly this defenition map is used for.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.MethodBody">
            <summary>
            Contains the details and MSIL for a method definition.
            </summary>
            <remarks>
            <para>
            The internal constructor is so that these classes can be instantiated from
            a valid MethodDef instance. Further this is the only way these objects should
            be created.
            </para>
            </remarks>
            <seealso cref="M:TheBoxSoftware.Reflection.MethodDef.GetMethodBody"/>
            <seealso cref="T:TheBoxSoftware.Reflection.MethodDef"/>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MethodBody.#ctor(System.Collections.Generic.List{TheBoxSoftware.Reflection.ILInstruction},System.Int32)">
            <summary>
            Initialsies a new instance of the MethodBody class.
            </summary>
            <param name="instructions">The instructions that make up the methods body.</param>
            <param name="maxStack">The maximum size of the stack for this method.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodBody.Instructions">
            <summary>
            Obtains the MSIL instructions for this method.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodBody.MaxStack">
            <summary>
            Indicates the maximum number of items that appear on the stack in this
            method.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.MethodDef">
            <summary>
            Represents a method definition as a reflected element.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MethodDef.GetGenericTypes">
            <summary>
            Obtains the list of generic types that are defined and owned only by this member.
            </summary>
            <returns>A collection of generic types for this member</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MethodDef.CreateFromMetadata(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.TypeDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.Core.COFF.MethodMetadataTableRow)">
            <summary>
            Initialises a new instance of MethodDef for the provided data
            </summary>
            <param name="assembly">The assembly this method is a part of</param>
            <param name="container">The owning type for this method</param>
            <param name="metadata">The metadata directory</param>
            <param name="row">The row detailing the method</param>
            <returns>The initialised MethodDef</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MethodDef.GetMethodBody">
            <summary>
            Obtains the details about the IL and body of this method and the contents
            of the MSIL.
            </summary>
            <returns>The instantiated <see cref="T:TheBoxSoftware.Reflection.MethodBody"/>.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MethodDef.GetIL(System.Int32,System.Int32)">
            <summary>
            Obtains the Intermediate Language instructions for this method
            </summary>
            <param name="address">The address of the start of the actual code</param>
            <param name="codeSize">The size of the actual code.</param>
            <returns>A byte array of IL operations</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MethodDef.GetInstructions(System.Byte[])">
            <summary>
            Returns an array of instructions that describe the code portion of this method.
            </summary>
            <returns>The array of instructions</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MethodDef.GetDisplayName(System.Boolean,System.Boolean)">
            <summary>
            Obtains a display ready version of the method name.
            </summary>
            <param name="includeNamespace">Indicates if the namespace should be included, this will include the type name.</param>
            <param name="includeParameters">Indicates if the parameters should be included.</param>
            <returns>A string representing a display ready version of the MethodDef name.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.MethodDef.GetDisplayName(System.Boolean)">
            <summary>
            Obtains a display ready version of the method name, which includes the parameters of the MethodDef.
            </summary>
            <param name="includeNamespace">Indicates if the namespace should be included, this will include the type name.</param>
            <returns>A string representing a display ready version of the MethodDef name.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodDef.Parameters">
            <summary>
            The parameters for this method.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodDef.RVA">
            <summary>
            The RVA for the methods IL body.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodDef.IsGeneric">
            <summary>
            Indicates if this method is a generic method or not.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodDef.GenericTypes">
            <summary>
            Collection of the generic types defined against this method.
            </summary>
            <remarks>
            If you need the generic types from this type and all its parent classes
            then utilise the <see cref="M:TheBoxSoftware.Reflection.MethodDef.GetGenericTypes"/> method instead.
            </remarks>
            <seealso cref="M:TheBoxSoftware.Reflection.MethodDef.GetGenericTypes"/>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodDef.IsSpecialName">
            <summary>
            Indicates if this method has a special name which is interpreted by the runtime,
            this is generally associated with the getters and setters or properties and
            events.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodDef.Attributes">
            <summary>
            Gets or sets an set of flags detailing generic information about this method.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodDef.ImplementationFlags">
            <summary>
            Gets or sets a set of flags detailing the implementation details of this
            method.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodDef.IsCompilerGenerated">
            <summary>
            Denotes if this method is generated and or managed by the compiler and not
            the programmer.
            </summary>
            <remarks>
            There is no actual property in the metadata that informs us of this, we simply
            user information from existing properties.
            </remarks>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodDef.IsConversionOperator">
            <summary>
            A boolean value indicating if this method is a conversion operator.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.MethodDef.IsExtensionMethod">
            <summary>
            Indicates if this method is an extension method or not.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.ModuleDef">
            <summary>
            Provides a definition for a module in an assembly.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ModuleDef.CreateFromMetadata(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.Core.COFF.ModuleMetadataTableRow)">
            <summary>
            Instantiates a module from the specified row in the metadata
            </summary>
            <param name="assembly">The assembly that contains and defines the module.</param>
            <param name="metadataDirectory">The metadata directory</param>
            <param name="row">The row to instantiate</param>
            <returns>The instantiated module</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ModuleDef.ModuleVersionId">
            <summary>
            The GUID that represents the Modules version identifier.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.OpCodesMap">
            <summary>
            Creates a nice searchable and iterable version of the
            OpCodes class.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.OpCodesMap.#ctor">
            <summary>
            Initialises a new instance of the OpCodesMap class
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.OpCodesMap.GetSingleton">
            <summary>
            Obtains a reference to the singleton
            </summary>
            <returns>The reference</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.OpCodesMap.GetCode(System.Int16)">
            <summary>
            Returns the description of the instruction represented
            by 'instruction'
            </summary>
            <param name="instruction">The instruction</param>
            <returns>The OpCode details</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.ParamDef">
            <summary>
            Describes a parameter
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ParamDef.CreateFromMetadata(TheBoxSoftware.Reflection.MethodDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.Core.COFF.ParamMetadataTableRow)">
            <summary>
            Initialises a ParamDef from provided metadata
            </summary>
            <param name="owner">The owning method of the parameter</param>
            <param name="metadata">The metadata stream</param>
            <param name="row">The row that details the parameter</param>
            <returns>The instantiated defenition</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ParamDef.Method">
            <summary>
            Reference to the method that owns the parameter
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ParamDef.Sequence">
            <Summary>
            A number that indicates the sequence in the parameter list this ParamDef
            refers to on its parent method.
            </Summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ParamDef.Constants">
            <summary>
            The constant values associated with the parameters if any.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ParamDef.IsIn">
            <summary>
            Indicates if the parameter has been declared as an in paramter
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ParamDef.IsOut">
            <summary>
            Indicates if the parameter has been declared as an out parameter
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ParamDef.IsOptional">
            <summary>
            Indicates if the parameter has been declared as optional.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.PropertyDef">
            <summary>
            A class that describes a property that has been defined in an <see cref="T:TheBoxSoftware.Reflection.TypeDef"/>.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.PropertyDef.CreateFromMetadata(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.TypeDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.Core.COFF.PropertyMetadataTableRow)">
            <summary>
            Initialises a new instance of the PropertyDef class.
            </summary>
            <param name="assembly">The assembly the property is defined in.</param>
            <param name="typeDef">The containing type definition.</param>
            <param name="metadata">The metadata store where the property is defined</param>
            <param name="row">The row that defines the details of the property.</param>
            <returns>The instantiated property.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.PropertyDef.GetDisplayName(System.Boolean,System.Boolean)">
            <summary>
            Returns a display name for the Property.
            </summary>
            <param name="includeNamespace">Indicates if the namespace should be included.</param>
            <param name="includeParameters">indicates if the parameters should be included.</param>
            <returns>A string representing the display name for the property.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.PropertyDef.GetDisplayName(System.Boolean)">
            <summary>
            Returns a display name for the property.
            </summary>
            <param name="includeNamespace">Indicates if the namespace should be included.</param>
            <returns>A string representing the display name for the property.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.PropertyDef.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.PropertyDef.GetMethod">
            <summary>
            Gets or sets the <see cref="T:TheBoxSoftware.Reflection.MethodDef"/> which relates to the 
            associated get method for the property. This can be null if there is no
            getter defined.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.PropertyDef.SetMethod">
            <summary>
            Gest or sets the <see cref="T:TheBoxSoftware.Reflection.MethodDef"/> which relates to the
            associated set method for the property. This can be null if there is no
            setter defined.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.PropertyDef.IsIndexer">
            <summary>
            Indicates if this property is an Indexer
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.ReflectedMember">
            <summary>
            Base class for all elements that are reflected from a PeCoffFile.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ReflectedMember.GetGloballyUniqueId">
            <summary>
            Returns an identifier which can uniquely identify this member across many <see cref="T:TheBoxSoftware.Reflection.AssemblyDef"/>s.
            </summary>
            <returns>A globally unique identifier</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ReflectedMember.GetAssemblyId">
            <summary>
            Returns the unique id of the Assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ReflectedMember.GetAssemblyId(System.Int64)">
            <summary>
            Returns the unique assembly identifier from a global id.
            </summary>
            <param name="id">The global identifier</param>
            <returns>The id of the assembly</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ReflectedMember.UniqueId">
            <summary>
            Represents an identifier that uniquly identifies this reflected element inside 
            its containing <see cref="T:TheBoxSoftware.Reflection.AssemblyDef"/>.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ReflectedMember.Assembly">
            <summary>
            A reference to the assembly which defines this member.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ReflectedMember.Name">
            <summary>
            Gets or sets the name for this ReflectedMember.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ReflectedMember.Attributes">
            <summary>
            The attributes associated with this member.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.ReflectionException">
            <summary>
            Exception that describes issues working with reflection based code.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ReflectionException.#ctor">
            <summary>
            Initialises a new instance of the ReflectionException.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ReflectionException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the ReflectionException.
            </summary>
            <param name="message">Message describing the error.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ReflectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the ReflectionException.
            </summary>
            <param name="message">Message describing the error.</param>
            <param name="innerException">The thrown exception.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ReflectionException.#ctor(TheBoxSoftware.Reflection.ReflectedMember,System.String,System.Exception)">
            <summary>
            Initialises a new instance of the ReflectionException.
            </summary>
            <param name="member">The member associated with this exception.</param>
            <param name="message">Message describing the error.</param>
            <param name="innerException">The thrown exception.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ReflectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">The info describing the exception.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.ReflectionException.Member">
            <summary>
            The member the exception is related to.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ReflectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the custom details of this exception to the SerializationInfo.
            </summary>
            <param name="info">The info to populate with custom details</param>
            <param name="context">The context</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.ReflectionException.GetExtendedInformation">
            <summary>
            Extracts as much information from the internal state of the exception.
            </summary>
            <returns>The formatted extended information</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Resources.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Resources.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Resources.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Resources.ExceptionMessages.Ex_CRefConstants_NotImplemented">
            <summary>
              Looks up a localized string similar to The indicator for CRef type {0} is not implemented..
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Resources.ExceptionMessages.Ex_GenericParametersNotValid">
            <summary>
              Looks up a localized string similar to Generic parameters can only be used by Type and Method definitions..
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Resources.ExceptionMessages.Ex_InvalidStream_StartCharacter">
            <summary>
              Looks up a localized string similar to The stream did not have the expected start character, check address details..
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ClassSyntax.#ctor(TheBoxSoftware.Reflection.TypeDef)">
            <summary>
            Initialises a new instance of the ClassSyntax class.
            </summary>
            <param name="type">The type to retrieve syntax details for.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ClassSyntax.GetIdentifier">
            <summary>
            Obtains the identifier for the class.
            </summary>
            <returns>The type identifier.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ClassSyntax.GetInterfaces">
            <summary>
            Obtains the names of all the interfaces this class implements.
            </summary>
            <returns>An array of strings identifying the interfaces.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ClassSyntax.GetGenericParameters">
            <summary>
            Obtains details of the generic parameters associated with this type.
            </summary>
            <returns>The array of generic parameters.</returns>
            <remarks>
            This method is only really valid when the type <see cref="P:TheBoxSoftware.Reflection.TypeRef.IsGeneric"/>
            property has been set to true.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ClassSyntax.GetBaseClass">
            <summary>
            Obtains the name of the base type this class implements.
            </summary>
            <returns>The base class for the type.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ClassSyntax.GetVisibility">
            <summary>
            Obtains the visibility modifier for the class.
            </summary>
            <returns>The visibility modifier for the class.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ClassSyntax.GetInheritance">
            <summary>
            Obtains the inheritance modifier for the class.
            </summary>
            <returns>The inheritance modifier.</returns>
            <remarks>
            Although the language specification does not specify a static modifier here,
            classes which are defined as both abstract and sealed seems to be the way to
            define the static modifier in the metadata. That is a static class can not have
            instances created and can not be derived from.
            </remarks>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Syntax.ClassSyntax.Class">
            <summary>
            Access to the class reference being represented by this syntax class.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.ConstantSyntax">
            <summary>
            Class that interogates a member for the details required to declare a constant.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ConstantSyntax.#ctor(TheBoxSoftware.Reflection.FieldDef)">
            <summary>
            Initialises a new instance of the ConstantSyntax class.
            </summary>
            <param name="field">The field to obtain the syntax details for.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ConstantSyntax.GetVisibility">
            <summary>
            Obtains the visibility of the constant value.
            </summary>
            <returns>A visibility enumerated value.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ConstantSyntax.GetType">
            <summary>
            Obtains the name of type which this field is.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ConstructorSyntax.GetIdentifier">
            <summary>
            Obtains the cleaned up identifier for the method.
            </summary>
            <returns>The name of the method.</returns>
            <remarks>
            If the method is generic, the metadata stores the name with a `1 style
            prefix denoting details of its generic types. This method cleans that
            information up. So for example a method Test'1 will return Test.
            </remarks>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpClassFormatter">
            <summary>
            
            </summary>
            <remarks>
            <code>
            class-declaration:
            	attributes(opt) class-modifiers(opt) class identifier class-base(opt) class-body
            </code>
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpClassFormatter.FormatVisibility(TheBoxSoftware.Reflection.Syntax.ClassSyntax)">
            <summary>
            Foramts the visibility modifier for a c# class.
            </summary>
            <param name="syntax">The syntax to format.</param>
            <returns>A formatted string representing the syntax of the class.</returns>
            <remarks>
            The visibility of a class is part of the modifiers section of the
            decleration. The modifiers are defined as:
            <code>
            class-modifiers:
                class-modifier
                class-modifiers   class-modifier
            class-modifier:
                new
                public
                protected
                internal
                private
                abstract
                sealed 
            </code>
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpClassFormatter.FormatInheritance(TheBoxSoftware.Reflection.Syntax.ClassSyntax)">
            <summary>
            Formats the inheritance modifier for a c# class.
            </summary>
            <param name="syntax">The syntax to format.</param>
            <returns>The formatted string representing the syntax of the class.</returns>
            <remarks>
            The inheritance of a class is part of the modifiers section of the
            decleration. The modifiers are defined as:
            <code>
            class-modifiers:
                class-modifier
                class-modifiers   class-modifier
            class-modifier:
                new
                public
                protected
                internal
                private
                abstract
                sealed 
            </code>
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpClassFormatter.FormatClassBase(TheBoxSoftware.Reflection.Syntax.ClassSyntax)">
            <summary>
            Foramts the class base portion of a class decleration.
            </summary>
            <param name="syntax">The syntax details for the class.</param>
            <returns>The string representing the class base.</returns>
            <remarks>
            The class base decleration is:
            <code>
            class-base:
                :   class-type
                :   interface-type-list
                :   class-type   ,   interface-type-list
            interface-type-list:
                interface-type
                interface-type-list   ,   interface-type 
            </code>
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpClassFormatter.Format(TheBoxSoftware.Reflection.Syntax.ClassSyntax)">
            <summary>
            Formats the provided <paramref name="syntax"/> instance based on a
            c# class decleration.
            </summary>
            <param name="syntax">The syntax for format.</param>
            <returns>A fully formatted c# class decleration.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpFormatter">
            <summary>
            Base class with methods that are useful for all C# formatting
            classes.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpFormatter.defaultTypes">
            <summary>
            Collection of all the types defined in this language with a language
            specific short form.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpFormatter.FormatVisibility(TheBoxSoftware.Reflection.Visibility)">
            <summary>
            Foramts the visibility modifier.
            </summary>
            <param name="syntax">The visibility to format.</param>
            <returns>A formatted string representing the syntaxs.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpFormatter.FormatInheritance(TheBoxSoftware.Reflection.Syntax.Inheritance)">
            <summary>
            Formats the inheritance modifier for C#.
            </summary>
            <param name="inheritance">The modifier to format.</param>
            <returns>The formatted syntax token.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpFormatter.FormatTypeName(TheBoxSoftware.Reflection.TypeRef)">
            <summary>
            Returns the language specific type name for the specified <paramref name="type"/>. For
            example in C# System.Boolean is referenced via the bool keyword.
            </summary>
            <param name="type">The type to get the name for.</param>
            <returns>The SyntaxToken reprsenting the name</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpIndexerFormatter">
            <summary>
            Provides C# Language specific formatting of indexers.
            </summary>
            <remarks>
            <para>The C# Langauge Specification states that indexers should be displayed
            as follows:</para>
            <code>
            indexer-declaration:
            	attributesopt   indexer-modifiersopt   indexer-declarator   {   accessor-declarations   }
            	indexer-modifiers:
            	indexer-modifier
            	indexer-modifiers   indexer-modifier
            indexer-modifier:
            	new
            	public
            	protected
            	internal
            	private
            	virtual
            	sealed
            	override
            	abstract
            	extern
            indexer-declarator:
            	type   this   [   formal-parameter-list   ]
            	type   interface-type   .   this   [   formal-parameter-list   ] 
            </code>
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpIndexerFormatter.#ctor(TheBoxSoftware.Reflection.Syntax.IndexorSyntax)">
            <summary>
            Initialises a new instance of the CSharpIndexorFormatter.
            </summary>
            <param name="syntax">The syntax containing the information about the member.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpIndexerFormatter.Format(TheBoxSoftware.Reflection.Syntax.IndexorSyntax)">
            <summary>
            Formats the indexer based on the language specification as a 
            collection of syntax tokens.
            </summary>
            <param name="syntax">The syntax class that describes the indexer.</param>
            <returns>The collection of tokens describing the indexer in the language</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpInterfaceFormatter">
            <summary>
            
            </summary>
            <remarks>
            <code>
            interface-declaration:
            	attributes(opt) interface-modifiers(opt) interface identifier interface-base(opt)
            </code>
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpInterfaceFormatter.FormatVisibility(TheBoxSoftware.Reflection.Syntax.InterfaceSyntax)">
            <summary>
            Formats the visibility modifier for the interface.
            </summary>
            <param name="syntax">The syntax to format.</param>
            <returns>A string representing the modifier for the interface.</returns>
            <remarks>
            <code>
            interface-modifiers:
                interface-modifier
                interface-modifiers   interface-modifier
            interface-modifier:
                new
                public
                protected
                internal
                private 
            </code>
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpInterfaceFormatter.FormatInterfaceBase(TheBoxSoftware.Reflection.Syntax.InterfaceSyntax)">
            <summary>
            Formats the interface base decleration for a c# interface.
            </summary>
            <param name="syntax">The syntax to format.</param>
            <returns>A string representing the interface-base for the interface.</returns>
            <remarks>
            <code>
            interface-base:
                ;   interface-type-list 
            </code>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TheBoxSoftware.Reflection.Syntax.CSharp.CSharpInterfaceFormatter.Format(TheBoxSoftware.Reflection.Syntax.InterfaceSyntax)" -->
        <member name="F:TheBoxSoftware.Reflection.Syntax.DelegateSyntax.type">
            <summary>
            Internal reference to a type that details of syntax elements can be obtained
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Syntax.DelegateSyntax.invokeMethod">
            <summary>
            All delegates have an invoke method and this seems to detail the return type
            and parameters for the delegate. So here we will store a loaded syntax instance
            containing those details.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.DelegateSyntax.#ctor(TheBoxSoftware.Reflection.TypeDef)">
            <summary>
            Initialises a new instance of the ClassSyntax class.
            </summary>
            <param name="type">The type to retrieve syntax details for.</param>
            <exception cref="T:System.ArgumentException">Thrown when the type provided is not a delegate.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the type provided is null.</exception>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.DelegateSyntax.GetVisibility">
            <summary>
            Obtains the visibility modifier for the class.
            </summary>
            <returns>The visibility modifier for the class.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.DelegateSyntax.GetInheritance">
            <summary>
            Obtains the inheritance modifier for the class.
            </summary>
            <returns>The inheritance modifier.</returns>
            <remarks>
            Although the language specification does not specify a static modifier here,
            classes which are defined as both abstract and sealed seems to be the way to
            define the static modifier in the metadata. That is a static class can not have
            instances created and can not be derived from.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.DelegateSyntax.GetGenericParameters">
            <summary>
            Obtains details of the generic parameters associated with this type.
            </summary>
            <returns>The array of generic parameters.</returns>
            <remarks>
            This method is only really valid when the type <see cref="P:TheBoxSoftware.Reflection.TypeRef.IsGeneric"/>
            property has been set to true.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.DelegateSyntax.GetIdentifier">
            <summary>
            Obtains the identifier for the delegate.
            </summary>
            <returns>The type identifier.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Syntax.DelegateSyntax.Class">
            <summary>
            Access to the class reference being represented by this syntax class.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.EnumSyntax">
            <summary>
            
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Syntax.EnumSyntax.type">
            <summary>
            Internal reference to a type that details of syntax elements can be obtained
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.EnumSyntax.#ctor(TheBoxSoftware.Reflection.TypeDef)">
            <summary>
            Initialises a new instance of the ClassSyntax class.
            </summary>
            <param name="type">The type to retrieve syntax details for.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.EnumSyntax.GetIdentifier">
            <summary>
            Obtains the identifier for the class.
            </summary>
            <returns>The type identifier.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.EnumSyntax.GetVisibility">
            <summary>
            Obtains the visibility modifier for the enumeration.
            </summary>
            <returns>The visibility modifier for the enumeration.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Syntax.EnumSyntax.Class">
            <summary>
            Access to the class reference being represented by this syntax class.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.EventSyntax">
            <summary>
            Allows the caller to obtain details of an event in a structured
            way.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.EventSyntax.#ctor(TheBoxSoftware.Reflection.EventDef)">
            <summary>
            Initialises a new instance of the EventSyntax class.
            </summary>
            <param name="eventDef">The details of the event to get the information from.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.EventSyntax.GetVisbility">
            <summary>
            Obtains the visibility for the event.
            </summary>
            <returns>The visibility.</returns>
            <remarks>
            This visibility of an event, as with a property, is
            determined by the most accessible method.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.FieldSyntax.GetType">
            <summary>
            Obtains the name of type which this field is.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.IClassFormatter">
            <summary>
            Interface defining a template for a formatters for class syntax.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IClassFormatter.FormatVisibility(TheBoxSoftware.Reflection.Syntax.ClassSyntax)">
            <summary>
            Returns a formatted version of the class visibility. Public, Private
            etc.
            </summary>
            <param name="syntax">The class to format.</param>
            <returns>
            A string representing the visibility of the class. For example C#
            implementation would return <c>public</c> for a public class.
            </returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IClassFormatter.FormatInheritance(TheBoxSoftware.Reflection.Syntax.ClassSyntax)">
            <summary>
            Returns a formatted version of the class inheritance modifier. Abstract,
            Sealed etc.
            </summary>
            <param name="syntax">The class to format.</param>
            <returns>
            A string representing the formatted inheritance for the class. For
            example C# implementation would return <c>abstract</c> for an
            abstract class.
            </returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IClassFormatter.FormatClassBase(TheBoxSoftware.Reflection.Syntax.ClassSyntax)">
            <summary>
            Returns a formatted version of the class base decleration.
            </summary>
            <param name="syntax">The class to format.</param>
            <returns>
            A formatted class base decleration. For example a C# implementation
            could return <c>: BaseClass, IInterface</c>.
            </returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IClassFormatter.Format(TheBoxSoftware.Reflection.Syntax.ClassSyntax)">
            <summary>
            Returns the fully formatted class.
            </summary>
            <param name="syntax">The class details to format.</param>
            <returns>A formatted class syntax decleration.</returns>
            <remarks>
            When implementing; this method will orchestrate the calling
            and formatting of the individual Format methods.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IEnumerationFormatter.FormatVisibility(TheBoxSoftware.Reflection.Syntax.EnumSyntax)">
            <summary>
            Returns a formatted version of the enumeration visibility. Public, Private
            etc.
            </summary>
            <param name="syntax">The enumeration to format.</param>
            <returns>
            A string representing the visibility of the enumeration. For example C#
            implementation would return <c>public</c> for a public enumeration.
            </returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IEnumerationFormatter.Format(TheBoxSoftware.Reflection.Syntax.EnumSyntax)">
            <summary>
            Returns the fully formatted enumeration.
            </summary>
            <param name="syntax">The enumeration details to format.</param>
            <returns>A formatted enumeration syntax decleration.</returns>
            <remarks>
            When implementing; this method will orchestrate the calling
            and formatting of the individual Format methods.
            </remarks>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.IFormatter">
            <summary>
            Interface defining a simple method that allows callers
            of implementing classes access to an definition not an
            implementation of a formatter.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IFormatter.Format">
            <summary>
            Method to return the format of a specific <see cref="T:TheBoxSoftware.Reflection.Syntax.Syntax"/>
            class.
            </summary>
            <returns>The list of formatted tokens</returns>
            <remarks>
            Implementors should, when implementing this method, call the
            more strongly typed IFormatter interfaces format method while
            passing in the private Syntax reference.
            </remarks>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.IIndexorFormatter">
            <summary>
            Defines the basic requirements for the information that a Formatter
            that implements this interface should return.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IInterfaceFormatter.FormatVisibility(TheBoxSoftware.Reflection.Syntax.InterfaceSyntax)">
            <summary>
            Returns a formatted version of the interface visibility. Public, Private
            etc.
            </summary>
            <param name="syntax">The interface to format.</param>
            <returns>
            A string representing the visibility of the interface. For example C#
            implementation would return <c>public</c> for a public class.
            </returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IInterfaceFormatter.FormatInterfaceBase(TheBoxSoftware.Reflection.Syntax.InterfaceSyntax)">
            <summary>
            Returns a formatted version of the interface base decleration.
            </summary>
            <param name="syntax">The ineterface to format.</param>
            <returns>
            A formatted interface base decleration. For example a C# implementation
            could return <c>: BaseClass, IInterface</c>.
            </returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IInterfaceFormatter.Format(TheBoxSoftware.Reflection.Syntax.InterfaceSyntax)">
            <summary>
            Returns the fully formatted interface.
            </summary>
            <param name="syntax">The class details to format.</param>
            <returns>A formatted class syntax decleration.</returns>
            <remarks>
            When implementing; this method will orchestrate the calling
            and formatting of the individual Format methods.
            </remarks>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.IndexorSyntax">
            <summary>
            Provides access to details of an Indexor defined in the metadata.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IndexorSyntax.#ctor(TheBoxSoftware.Reflection.PropertyDef)">
            <summary>
            Initialises a new instance of the EventSyntax class.
            </summary>
            <param name="propertyDef">The details of the event to get the information from.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IndexorSyntax.GetVisibility">
            <summary>
            Obtains the Visibility of the member.
            </summary>
            <returns>An enumerated value representing the visibility of the member.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IndexorSyntax.GetGetterVisibility">
            <summary>
            Obtains the Visibility of the getter method of the property.
            </summary>
            <returns>An enumerated value representing the visibility of the member.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IndexorSyntax.GetSetterVisibility">
            <summary>
            Obtains the Visibility of the setter method of the property.
            </summary>
            <returns>An enumerated value representing the visibility of the member.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IndexorSyntax.GetInheritance">
            <summary>
            Obtains details of how this member is inherited in base classes.
            </summary>
            <returns>An enumerated value describing how the method is inherited.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IndexorSyntax.GetType">
            <summary>
            Obtains a class that describes the details of types defined in this property.
            </summary>
            <returns>The details of the type.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.IndexorSyntax.GetIdentifier">
            <summary>
            Obtains the name of the property. This will always be 'Item' for
            indexors.
            </summary>
            <returns>The identifier of the property</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Syntax.IndexorSyntax.GetMethod">
            <summary>
            A reference to the get method for this property.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Syntax.IndexorSyntax.SetMethod">
            <summary>
            A reference to the set method for this property.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Syntax.InterfaceSyntax.type">
            <summary>
            Internal reference to a type that details of syntax elements can be obtained
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.InterfaceSyntax.#ctor(TheBoxSoftware.Reflection.TypeDef)">
            <summary>
            Initialises a new instance of the InterfaceSyntax class.
            </summary>
            <param name="type">The type to retrieve syntax details for.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the provided <paramref name="type"/> is not an interface.
            </exception>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.InterfaceSyntax.GetIdentifier">
            <summary>
            Obtains the identifier for the class.
            </summary>
            <returns>The type identifier.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.InterfaceSyntax.GetInterfaces">
            <summary>
            Obtains the names of all the interfaces this class implements.
            </summary>
            <returns>An array of strings identifying the interfaces.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.InterfaceSyntax.GetBaseClass">
            <summary>
            Obtains the name of the base type this class implements.
            </summary>
            <returns>The base class for the type.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.InterfaceSyntax.GetVisibility">
            <summary>
            Obtains the visibility modifier for the class.
            </summary>
            <returns>The visibility modifier for the class.</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Syntax.InterfaceSyntax.Class">
            <summary>
            Access to the class reference being represented by this syntax class.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.IOperatorFormatter">
            <summary>
            Interface for sytax related classes to implement a standard mechanism
            for formatting operator overloads.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.MethodSyntax.GetIdentifier">
            <summary>
            Obtains the cleaned up identifier for the method.
            </summary>
            <returns>The name of the method.</returns>
            <remarks>
            If the method is generic, the metadata stores the name with a `1 style
            prefix denoting details of its generic types. This method cleans that
            information up. So for example a method Test'1 will return Test.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.MethodSyntax.GetGenericParameters">
            <summary>
            Obtains a collection of <see cref="T:TheBoxSoftware.Reflection.GenericTypeRef"/> instances detailing
            the generic types for this method.
            </summary>
            <returns>The collection of generic parameters for the method.</returns>
            <remarks>
            This method is only valid when the <see cref="P:TheBoxSoftware.Reflection.MethodDef.IsGeneric"/> property
            has been set to true.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.MethodSyntax.GetParameters">
            <summary>
            Collects and returns all of the parameters for the associated <see cref="T:TheBoxSoftware.Reflection.MethodDef" />.
            </summary>
            <returns>The list of <see cref="T:TheBoxSoftware.Reflection.Syntax.ParameterDetails" /> detailing the parameters</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.OperatorSyntax.GetIdentifier">
            <summary>
            Obtains the cleaned up identifier for the method.
            </summary>
            <returns>The name of the method.</returns>
            <remarks>
            Operators have names such as op_Equality, but when actually producing
            the overload in code is == (c#). This will return the name as defined
            metadata, e.g. op_Equality - it is up to the language specific implementation
            to convert that to a more suitable representation.
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.OperatorSyntax.GetGenericParameters">
            <summary>
            Obtains a collection of <see cref="T:TheBoxSoftware.Reflection.GenericTypeRef"/> instances detailing
            the generic types for this method.
            </summary>
            <returns>The collection of generic parameters for the method.</returns>
            <remarks>
            This method is only valid when the <see cref="P:TheBoxSoftware.Reflection.MethodDef.IsGeneric"/> property
            has been set to true.
            </remarks>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.ParameterDetails">
            <summary>
            Details class which provides access to information necessary
            to understand the construction of a parameter.
            </summary>
            <see cref="T:TheBoxSoftware.Reflection.Signitures.TypeDetails"/>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ParameterDetails.#ctor">
            <summary>
            Initialises a new instance of the ParameterDetails class.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.ParameterDetails.#ctor(System.String,TheBoxSoftware.Reflection.Signitures.TypeDetails)">
            <summary>
            Initialises a new instance of the ParameterDetails class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="details">The details of the type for the parameter.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Syntax.ParameterDetails.TypeDetails">
            <summary>
            The full details of the type.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Syntax.ParameterDetails.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.PropertySyntax">
            <summary>
            Provides access to the important information for creating formatted
            syntax for <see cref="T:TheBoxSoftware.Reflection.PropertyDef"/>s.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.PropertySyntax.#ctor(TheBoxSoftware.Reflection.PropertyDef)">
            <summary>
            Initialises a new instance of the EventSyntax class.
            </summary>
            <param name="propertyDef">The details of the event to get the information from.</param>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Syntax.StructSyntax.type">
            <summary>
            Internal reference to a type that details of syntax elements can be obtained
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.StructSyntax.#ctor(TheBoxSoftware.Reflection.TypeDef)">
            <summary>
            Initialises a new instance of the ClassSyntax class.
            </summary>
            <param name="type">The type to retrieve syntax details for.</param>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.Syntax">
            <summary>
            A base class for all Syntax classes that provides useful methods and
            properties for managing the required syntax information for concrete
            implementations.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.Syntax.GetTypeName(TheBoxSoftware.Reflection.TypeRef)">
            <summary>
            Obtains the name of the type provided. This class will remove any
            superflous characters from the name to return the name that the user
            will understand and had entered when creating the type.
            </summary>
            <param name="type">The type to get the name of.</param>
            <returns>A string representing the name of the type.</returns>
            <remarks>
            .NET Framework will add special characters to names to allow, for example,
            generic methods to be overloaded. These characeters are removed in this
            method and the user defined name of the type is returned.
            <example>
            // User creates type
            public class MyGenericType&lt;T&gt;
            // Framework outputs
            MyGenericType`1
            // Method returns
            MyGenericType
            </example>
            </remarks>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.SyntaxFactory">
            <summary>
            Static Factory class for instantiating syntax IFormatter implementations.
            </summary>
            <remarks>
            <para>The syntax system works from here. The Create method is called and the
            Factory will then instantiate the correct classes to format the member.</para>
            <para>There are a number of classes that interact with each other to provide
            the formatting. First the Syntax class, provides a wrapper to the member to
            make it easy to obtain the important information for the member. This class
            is language agnostic. The second portion provides language dependant formatters
            to provide the langauge syntax for the member.
            </para>
            <para>First a Interface is created to provide the basic mechanisms that all 
            formatters should adhere to. Then each langauge dependant formatter implements
            that interface and provides the language specific Syntax blocks which can be
            used outside of the library</para>
            <para>When creating new Formatter Interfaces the interface should derive from
            the IFormatter interface to make sure implementing classes implement the 
            Format method.</para>
            <para>Finally, it is important to note that formatters should implement formatting
            based on the language specification for the language they are formatting for.</para>
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.SyntaxFactory.Create(TheBoxSoftware.Reflection.ReflectedMember,TheBoxSoftware.Reflection.Syntax.Languages)">
            <summary>
            Instantiates the correct IFormatter implementation based on the provided
            <paramref name="member"/> and <paramref name="langauge"/>.
            </summary>
            <param name="member">The member to create the formatter for.</param>
            <param name="language">The language the formatter should be for.</param>
            <returns>A IFormatter implementation.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.SyntaxFactory.CreateSyntax(TheBoxSoftware.Reflection.ReflectedMember)">
            <summary>
            Returns a correctly typed and instantiated <see cref="T:TheBoxSoftware.Reflection.Syntax.Syntax"/> class
            for the specified <paramref name="member"/>.
            </summary>
            <param name="member">The member to create a Syntax instance for.</param>
            <returns>The instantiated Syntax class.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.SyntaxFactory.CreateFormatter(TheBoxSoftware.Reflection.Syntax.Syntax,TheBoxSoftware.Reflection.Syntax.Languages)">
            <summary>
            Instantiates a IFormatter implementing class for the provided
            <paramref name="syntax"/> and <paramref name="language"/>.
            </summary>
            <param name="syntax">The syntax to create a formatter for.</param>
            <param name="language">The language the formatter should be.</param>
            <returns>The IFormatter implementation.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.SyntaxToken">
            <summary>
            <para>A SyntaxToken is a string that represents an element of a syntax block. A 
            SyntaxToken is a string and a <see cref="T:TheBoxSoftware.Reflection.Syntax.SyntaxTokens"/> type.</para>
            </summary>
            <remarks>
            <para>A <see cref="T:TheBoxSoftware.Reflection.Syntax.IFormatter"/> will return a list of syntax tokens. Here is an
            example of how to use SyntaxTokens:
            </para>
            <code>
            List&lt;SyntaxToken&gt; tokens = new List&lt;SyntaxToken&gt;();
            
            tokens.AddRange(this.GetVisibility(syntax));
            tokens.Add(new SyntaxToken(" ", SyntaxTokens.Text));
            tokens.Add(new SyntaxToken("const", SyntaxTokens.Keyword));
            tokens.Add(new SyntaxToken(" ", SyntaxTokens.Text));
            tokens.Add(this.GetType(syntax));
            tokens.Add(new SyntaxToken(" ", SyntaxTokens.Text));
            tokens.Add(new SyntaxToken(syntax.GetIdentifier(), SyntaxTokens.Text));
            
            return tokens;
            </code>
            </remarks>
            <seealso cref="T:TheBoxSoftware.Reflection.Syntax.SyntaxTokens"/>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.SyntaxToken.#ctor(System.String,TheBoxSoftware.Reflection.Syntax.SyntaxTokens)">
            <summary>
            Initialises a new instance of the SyntaxToken class.
            </summary>
            <param name="content">The tokens content</param>
            <param name="tokenType">The type of token.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Syntax.SyntaxToken.TokenType">
            <summary>
            Represents the type of token this SyntaxToken represents.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.Syntax.SyntaxToken.Content">
            <summary>
            A string representing the actual displayable content for the
            token.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.SyntaxTokenCollection">
            <summary>
            Manages a collection of <see cref="T:TheBoxSoftware.Reflection.Syntax.SyntaxToken"/>s.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.SyntaxTokenCollection.ToString">
            <summary>
            Returns a unformatted string representation of the syntax represented
            by the collection of SyntaxTokens.
            </summary>
            <returns>A string representing the syntax</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.SyntaxTokens">
            <summary>
            Enumeration of token types that <see cref="T:TheBoxSoftware.Reflection.Syntax.SyntaxToken"/> can
            be.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Syntax.SyntaxTokens.Text">
            <summary>
            This is a normal text token.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Syntax.SyntaxTokens.Keyword">
            <summary>
            This token represents a keyword.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.VisualBasic.VBFormatter">
            <summary>
            Base class with methods that are useful for all VB formatting
            classes.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.Syntax.VisualBasic.VBFormatter.defaultTypes">
            <summary>
            Collection of all the types defined in this language with a language
            specific short form.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.VisualBasic.VBFormatter.FormatTypeName(TheBoxSoftware.Reflection.TypeRef)">
            <summary>
            Returns the language specific type name for the specified <paramref name="type"/>. For
            example in C# System.Boolean is referenced via the bool keyword.
            </summary>
            <param name="type">The type to get the name for.</param>
            <returns>The SyntaxToken reprsenting the name</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.Syntax.VisualBasic.VBFormatter.FormatGenericParameters(System.Collections.Generic.List{TheBoxSoftware.Reflection.GenericTypeRef})">
            <summary>
            Formats the generic types for a the specified <paramref name="genericTypes"/>.
            </summary>
            <param name="genericTypes">The types to format.</param>
            <returns>The tokens for the generic types.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Syntax.VisualBasic.VBIndexorFormatter">
            <summary>
            <para>
            Provides a formatting implementation for Indexor properties in 
            VB.NET.
            </para>
            <para>
            Below is an example of how indexors are formatted in VB.NET:
            <example>
            Public Property Item(index As Integer) As Object
            </example>
            </para>
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.Visibility">
            <summary>
            Visibility flags that apply to all members in the reflection namespace.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.TypeDef">
            <summary>
            Contains the information regarding the construction and elements
            of a type reflected from the metadata information. A type definition
            is a metadata reflected type which is defined in an assembly.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetExtendingTypes">
            <summary>
            Obtains all of the <see cref="T:TheBoxSoftware.Reflection.TypeRef"/>s that extend this TypeDef.
            </summary>
            <returns>A collection of derived types.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetGenericTypes">
            <summary>
            Obtains the list of generic types that are defined and owned only by this member.
            </summary>
            <returns>A collection of generic types for this member</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetFields">
            <summary>
            Obtains the fields that are defined in this type. System generated fields will not be
            returned.
            </summary>
            <returns>The fields in the type.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetFields(System.Boolean)">
            <summary>
            Obtains the fields that are defined in this TypeDef.
            </summary>
            <param name="includeSystemGenerated">Indicates if system generated fields should be returned.</param>
            <returns>The fields in the type.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetMethods">
            <summary>
            Obtains only the methods, not property accessors or operand overload methods for this type
            </summary>
            <returns>A collection of MethodDefs representing the methods for this type</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetMethods(System.Boolean)">
            <summary>
            Obtains the methods defined in this type.
            </summary>
            <param name="includeSystemGenerated">Indicates if system generated methods should be returned.</param>
            <returns>The methods defined in this type.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetConstructors">
            <summary>
            Returns a collection of constructor methods defined for this type.
            </summary>
            <returns>The collection of constructors.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetConstructors(System.Boolean)">
            <summary>
            Returns a collection of constructors defined for this type.
            </summary>
            <param name="includeSystemGenerated">Indicates if system generated methods should be included.</param>
            <returns>The collection of constructors.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetOperators">
            <summary>
            Returns a collection of operator methods defined for this type.
            </summary>
            <returns>A collection of zero or more operators defined in this TypeDef.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetOperators(System.Boolean)">
            <summary>
            Returns a collection of operator methods defined for this type.
            </summary>
            <param name="includeSystemGenerated">Indicates if system generated operators should be included.</param>
            <returns>A collection of zero or more operators defined in this TypeDef.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetProperties">
            <summary>
            Returns a collection of properties that have been defined for this type. Properties
            are stored as a series of MethodDef structures, representing the get_ and set_
            methods. The PropertyDef wraps these methods up and provides a nice wrapper to
            retrieve the names and other details of the property.
            </summary>
            <returns>A collection of properties defined for the type.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.GetEvents">
            <summary>
            Obtains a collection of events that are defined in this type.
            </summary>
            <returns>The collection of events.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.CreateFromMetadata(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.Core.COFF.TypeDefMetadataTableRow)">
            <summary>
            Creates a new TypeDef instance based on the provided metadata row.
            </summary>
            <param name="assembly">The assembly the type was defined in</param>
            <param name="metadata">The metadata directory</param>
            <param name="row">The metadata row which describes the type</param>
            <returns></returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.LoadEvents(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.MetadataToDefinitionMap,TheBoxSoftware.Reflection.TypeDef,TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Int32)">
            <summary>
            Loads the details of the events defined in this type.
            </summary>
            <param name="assembly">The assembly this type is defined in.</param>
            <param name="metadata">The metadata that defines the type.</param>
            <param name="map">The map to store and retrieve related information from.</param>
            <param name="typeDef">The type to populate with the loaded events.</param>
            <param name="metadataStream">The easy access metadata stream for the metadata.</param>
            <param name="indexOfTypeInMetadataTable">The index of the parent type in the metadata table.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeDef.LoadProperties(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.MetadataToDefinitionMap,TheBoxSoftware.Reflection.TypeDef,TheBoxSoftware.Reflection.Core.COFF.MetadataStream,System.Int32)">
            <summary>
            Loads the details of the properties defined in this type.
            </summary>
            <param name="assembly">The assembly this type is defined in.</param>
            <param name="metadata">The metadata that defines the type.</param>
            <param name="map">The map to store and retrieve related information from.</param>
            <param name="typeDef">The type to populate with the loaded events.</param>
            <param name="metadataStream">The easy access metadata stream for the metadata.</param>
            <param name="indexOfTypeInMetadataTable">The index of the parent type in the metadata table.</param>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.Methods">
            <summary>
            The methods this type contains
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.Fields">
            <summary>
            The fields this type contains
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.Events">
            <summary>
            The events this type contains.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.Properties">
            <summary>
            The properties this type contains.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.InheritsFrom">
            <summary>
            Returns a reference to the TypeDef or Ref which this type
            inherits from.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.GenericTypes">
            <summary>
            Collection of all the generic types that are relevant for this member, this
            includes the types defined in parent and containing classes.
            </summary>
            <seealso cref="M:TheBoxSoftware.Reflection.TypeDef.GetGenericTypes"/>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.IsInterface">
            <summary>
            Indicates if this class is an Interface.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.IsEnumeration">
            <summary>
            Indicates if this class is an enumeration.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.IsDelegate">
            <summary>
            Indicates if this class is a delegate
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.Flags">
            <summary>
            Flags defining extra information about the type.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.HasMembers">
            <summary>
            Indicates if this type has any members defined
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.Namespace">
            <summary>
            Returns the namespace for the current class. This is obtained from the
            Types metadata.
            </summary>
            <remarks>
            <para>
            When the class <see cref="P:TheBoxSoftware.Reflection.TypeDef.IsNested"/> the namespace returned is the namespace
            of the enclosing type. Where the class is nested multiple times each nested class
            is checked until one its containers defines a namespace and that is returned.
            </para>
            </remarks>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.IsNested">
            <summary>
            Indicates if this class is a nested class, if so the <see cref="P:TheBoxSoftware.Reflection.TypeDef.ContainingClass"/> property
            details its container.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.IsStructure">
            <summary>
            Indicates if this TypeDef is a structure
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.ContainingClass">
            <summary>
            When this class is a nested class this property will contain the class which
            owns this class.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.Implements">
            <summary>
            Collection of <see cref="T:TheBoxSoftware.Reflection.TypeRef"/> instances defining the interfaces this class implements.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.MemberAccess">
            <summary>
            Returns the <see cref="T:TheBoxSoftware.Reflection.Visibility"/> of the TypeDef.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeDef.IsCompilerGenerated">
            <summary>
            Indicates if this type is compiler generated.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.TypeDef.EventMapComparer">
            <summary>
            Internal comparer to enable fast binary searching of the event table.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.TypeDef.PropertyMapComparer">
            <summary>
            Internal comparer to enable fast binary searching of the property table.
            </summary>
        </member>
        <member name="T:TheBoxSoftware.Reflection.TypeInNamespaceMap">
            <summary>
            Internal mapping class that maps types in to there respective
            namespaces. The type itself is not returned only an index to the
            definition map.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeInNamespaceMap.Add(System.String,TheBoxSoftware.Reflection.Core.COFF.MetadataTables,TheBoxSoftware.Reflection.Core.COFF.MetadataRow)">
            <summary>
            Adds a new type to a namespaces with a reference to its associated metadata
            file.
            </summary>
            <param name="inNamespace">The namespace the type is defined in</param>
            <param name="table">The table storing the metadata</param>
            <param name="row">The row defining the details of the types metadata.</param>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeInNamespaceMap.GetAllNamespaces">
            <summary>
            Returns a collection of all the namespaces defined in this map.
            </summary>
            <returns>The string collection of namespaces.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeInNamespaceMap.FindTypeInNamespace(System.String,System.String)">
            <summary>
            This is going to be a slow method and it will get slower the more types are
            defined in an assembly. This is a last resort method for finding types in
            an assembly.
            </summary>
            <param name="inNamespace">The namspace the type is in.</param>
            <param name="typeName">The name of the type to find</param>
            <returns>The found TypeDef or null if not found.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeInNamespaceMap.ContainsNamespace(System.String)">
            <summary>
            Checks if 'theNamespace' specified is defined in this assembly.
            </summary>
            <param name="theNamespace">The namespace to check for.</param>
            <returns>True if it is else false.</returns>
        </member>
        <member name="T:TheBoxSoftware.Reflection.TypeRef">
            <summary>
            Details a reference to a Type that resides in another assembly.
            </summary>
        </member>
        <member name="F:TheBoxSoftware.Reflection.TypeRef._resolutionScope">
            <field>
            A reference to the metadata resolution scope details, that will allow
            us to obtain the details to resolve this reference to its external entry.
            </field>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeRef.CreateFromMetadata(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.Core.COFF.TypeRefMetadataTableRow)">
            <summary>
            Initialises a new instance of the TypeRef class.
            </summary>
            <param name="assembly">The assembly that defines the type reference.</param>
            <param name="metadata">The assembly metadata</param>
            <param name="row">The metadata row that describes the type reference.</param>
            <returns>A reference to a TypeRef that represents the metadata row.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeRef.GetFullyQualifiedName">
            <summary>
            Returns the fully qualified name for this type
            </summary>
            <returns>A fully qualified name</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeRef.GetDisplayName(System.Boolean)">
            <summary>
            Returns a nice display name for the type
            </summary>
            <param name="includeNamespace">
            Indicates wether or not the namespace should be included.
            </param>
            <returns>A string that is a nice representation of the type for display purposes.</returns>
            <remarks>
            This method will return a name that can be used to display to users of
            applications utilising this type.
            <example>
            Generic Type: List&lt;MyClass&gt;
            Array: MyClass[]
            Normal: MyClass
            </example>
            </remarks>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeRef.ToString">
            <summary>
            Returns a string representation of the TypeRef
            </summary>
            <returns>A string that represents the type reference.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeRef.GetUniqueName">
            <summary>
            Returns the unique name for this definition
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeRef.ResolvingAssembly">
            <summary>
            Returns a reference to the extenral member that this reference can be
            resolved in. This will generally be a reference to the external 
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeRef.Namespace">
            <summary>
            The namespace in which this type resides.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeRef.IsArray">
            <summary>
            Indicates if this TypeRef is an array instance or not
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeRef.IsGeneric">
            <summary>
            TODO Should implement this properly for TypeDef, TypeRef entries
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeRef.IsExternalReference">
            <summary>
            Indicates wether or not this member is a reference to an external type.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeRef.ExtensionMethods">
            <summary>
            Extension methods associated with this type.
            </summary>
            <remarks>
            Extension methods are defined on the TypeRef as this represents a reference which 
            is used in this library. So in essance all types loaded will be recorded. TypeDef
            derives for this type too, which means all assembly defined types will get this
            functionality.
            </remarks>
        </member>
        <member name="T:TheBoxSoftware.Reflection.TypeSpec">
            <summary>
            Details the specification of a type. This is generally used by the metadata
            to allow for types to derive from and implement interfaces and classes that
            are generic.
            </summary>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeSpec.CreateFromMetadata(TheBoxSoftware.Reflection.AssemblyDef,TheBoxSoftware.Reflection.Core.COFF.MetadataDirectory,TheBoxSoftware.Reflection.Core.COFF.TypeSpecMetadataTableRow)">
            <summary>
            Creates a new instance of the TypeSpec class, using the provided information.
            </summary>
            <param name="assembly">The assembly this type specification is defined.</param>
            <param name="metatadata">The metadata directory containing the information.</param>
            <param name="row">The metadata row containing the actual details.</param>
            <returns>The instantiated type specification.</returns>
        </member>
        <member name="M:TheBoxSoftware.Reflection.TypeSpec.LoadDetails">
            <summary>
            Loads the details of the underlying type and specification.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeSpec.Name">
            <summary>
            Gets the name of the underlying type in this specification.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeSpec.Namespace">
            <summary>
            Gets the namespace of the underlying type in this specification.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeSpec.IsGeneric">
            <summary>
            Indicates if this type is a generic type.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeSpec.Signiture">
            <summary>
            The signiture defined for this member.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeSpec.TypeDetails">
            <summary>
            Gets a reference to the details of the underlying type.
            </summary>
        </member>
        <member name="P:TheBoxSoftware.Reflection.TypeSpec.ImplementingType">
            <summary>
            Gets or sets the type which is implementing this base type or interface.
            </summary>
        </member>
    </members>
</doc>
