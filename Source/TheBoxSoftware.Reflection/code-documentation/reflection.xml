<docs>
  <assemblydef>
    <member name="class">
      <remarks>
        <para>
          The AssemblyDef is the starting point for obtaining reflected information
          about a .NET assembly. This information is obtained by parsing and discerning
          information about <see cref="TypeDef"/>s, <see cref="MethodDef"/>s etc from
          the .NET metadata stored in the <see cref="PeCoffFile"/>.
        </para>
        <para>
          The assembly implements a mechanism for generating unique identifiers
          that can be assigned to each of the elements reflected in this assembly. The
          unique identifier is not really required but can help other applications to
          store keys and find reflected elements more quickly and uses less memory than
          string based unique identifiers.
        </para>
        <example>
          <code>
          // Instantiate from a full file path and name
          AssemblyDef assembly = AssemblyDef.Create(myAssemblyPath);
          
          // Instantiate from an already existing loaded metadata file
          PeCoffFile peCoffFile = new PeCoffFile(myAssemblyPath);
          AssemblyDef assembly = AssemblyDef.Create(peCoffFile);
          </code>
        </example>
      </remarks>
      <seealso cref="PeCoffFile"/>
    </member>

    <member name="create">
      <exception cref="ArgumentNullException">The filename was null or empty.</exception>
      <exception cref="NotAManagedLibraryException">
        Thrown when a PeCoff file is passed to the function and the <paramref name="fileName"/>
        does not contain a <see cref="DataDirectories.CommonLanguageRuntimeHeader"/>.
      </exception>
    </member>

    <member name="create2">
      <exception cref="ArgumentNullException">Thrown when the PeCoffFile is null.</exception>
      <exception cref="NotAManagedLibraryException">
        Thrown when a PeCoff file is passed to the function and the <paramref name="peCoffFile"/>
        does not contain a <see cref="DataDirectories.CommonLanguageRuntimeHeader"/>.
      </exception>
    </member>

    <member name="isnamespacedefined">
      <summary>
        Checks if this assembly defines the namespace specified.
      </summary>
      <param name="theNamespace">The namespace to check.</param>
      <returns>True if yes else false.</returns>
      <remarks>
        When using this make sure that you are aware that more than one assembly
        can specifiy the same namespace.
      </remarks>
    </member>

    <member name="resolvemetadatatoken">
      <remarks>
        A token is specific to an assembly.
      </remarks>
    </member>

    <member name="getgloballyuniqueid">
      <summary>
        Returns a unique identifier for this AssemblyDef.
      </summary>
      <returns></returns>
    </member>

    <member name="getassemblyid">
      <summary>
        Returns the unique identifier of the AssemblyDef
      </summary>
      <returns>The assembly unique id</returns>
    </member>

    <member name="stringstream">
      <summary>
        Gets or sets a reference to the string stream.
      </summary>
      <remarks>
        This has been created to reduce the cost of obtaining this information, it is
        a well access field and storing it behind a property just increases cost for no
        reason.
      </remarks>
    </member>
  </assemblydef>

  <typeref>
    <member name="getdisplayname">
      <returns>A string that is a nice representation of the type for display purposes.</returns>
      <remarks>
      This method will return a name that can be used to display to users of
      applications utilising this type.
      <example>
Generic Type: List&lt;MyClass&gt;
Array: MyClass[]
Normal: MyClass
        </example>
      </remarks>
    </member>
    <member name="extensionmethods">
      <remarks>
        Extension methods are defined on the TypeRef as this represents a reference which
        is used in this library. So in essance all types loaded will be recorded. TypeDef
        derives for this type too, which means all assembly defined types will get this
        functionality.
      </remarks>
    </member>
  </typeref>
</docs>